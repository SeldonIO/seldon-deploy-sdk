# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1InferenceLogsModelItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'namespace': 'str',
        'pipeline_name': 'str',
        'model_name': 'str',
        'count': 'int',
        'start_time': 'datetime',
        'end_time': 'datetime'
    }

    attribute_map = {
        'namespace': 'namespace',
        'pipeline_name': 'pipelineName',
        'model_name': 'modelName',
        'count': 'count',
        'start_time': 'startTime',
        'end_time': 'endTime'
    }

    def __init__(self, namespace=None, pipeline_name=None, model_name=None, count=None, start_time=None, end_time=None):  # noqa: E501
        """V1InferenceLogsModelItem - a model defined in Swagger"""  # noqa: E501

        self._namespace = None
        self._pipeline_name = None
        self._model_name = None
        self._count = None
        self._start_time = None
        self._end_time = None
        self.discriminator = None

        if namespace is not None:
            self.namespace = namespace
        if pipeline_name is not None:
            self.pipeline_name = pipeline_name
        if model_name is not None:
            self.model_name = model_name
        if count is not None:
            self.count = count
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time

    @property
    def namespace(self):
        """Gets the namespace of this V1InferenceLogsModelItem.  # noqa: E501


        :return: The namespace of this V1InferenceLogsModelItem.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this V1InferenceLogsModelItem.


        :param namespace: The namespace of this V1InferenceLogsModelItem.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this V1InferenceLogsModelItem.  # noqa: E501


        :return: The pipeline_name of this V1InferenceLogsModelItem.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this V1InferenceLogsModelItem.


        :param pipeline_name: The pipeline_name of this V1InferenceLogsModelItem.  # noqa: E501
        :type: str
        """

        self._pipeline_name = pipeline_name

    @property
    def model_name(self):
        """Gets the model_name of this V1InferenceLogsModelItem.  # noqa: E501


        :return: The model_name of this V1InferenceLogsModelItem.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this V1InferenceLogsModelItem.


        :param model_name: The model_name of this V1InferenceLogsModelItem.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def count(self):
        """Gets the count of this V1InferenceLogsModelItem.  # noqa: E501


        :return: The count of this V1InferenceLogsModelItem.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this V1InferenceLogsModelItem.


        :param count: The count of this V1InferenceLogsModelItem.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def start_time(self):
        """Gets the start_time of this V1InferenceLogsModelItem.  # noqa: E501


        :return: The start_time of this V1InferenceLogsModelItem.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this V1InferenceLogsModelItem.


        :param start_time: The start_time of this V1InferenceLogsModelItem.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this V1InferenceLogsModelItem.  # noqa: E501


        :return: The end_time of this V1InferenceLogsModelItem.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this V1InferenceLogsModelItem.


        :param end_time: The end_time of this V1InferenceLogsModelItem.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1InferenceLogsModelItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1InferenceLogsModelItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
