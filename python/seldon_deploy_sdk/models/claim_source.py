# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClaimSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_claim_name': 'str',
        'resource_claim_template_name': 'str'
    }

    attribute_map = {
        'resource_claim_name': 'resourceClaimName',
        'resource_claim_template_name': 'resourceClaimTemplateName'
    }

    def __init__(self, resource_claim_name=None, resource_claim_template_name=None):  # noqa: E501
        """ClaimSource - a model defined in Swagger"""  # noqa: E501

        self._resource_claim_name = None
        self._resource_claim_template_name = None
        self.discriminator = None

        if resource_claim_name is not None:
            self.resource_claim_name = resource_claim_name
        if resource_claim_template_name is not None:
            self.resource_claim_template_name = resource_claim_template_name

    @property
    def resource_claim_name(self):
        """Gets the resource_claim_name of this ClaimSource.  # noqa: E501

        ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.  # noqa: E501

        :return: The resource_claim_name of this ClaimSource.  # noqa: E501
        :rtype: str
        """
        return self._resource_claim_name

    @resource_claim_name.setter
    def resource_claim_name(self, resource_claim_name):
        """Sets the resource_claim_name of this ClaimSource.

        ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.  # noqa: E501

        :param resource_claim_name: The resource_claim_name of this ClaimSource.  # noqa: E501
        :type: str
        """

        self._resource_claim_name = resource_claim_name

    @property
    def resource_claim_template_name(self):
        """Gets the resource_claim_template_name of this ClaimSource.  # noqa: E501

        ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.  # noqa: E501

        :return: The resource_claim_template_name of this ClaimSource.  # noqa: E501
        :rtype: str
        """
        return self._resource_claim_template_name

    @resource_claim_template_name.setter
    def resource_claim_template_name(self, resource_claim_template_name):
        """Sets the resource_claim_template_name of this ClaimSource.

        ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.  # noqa: E501

        :param resource_claim_template_name: The resource_claim_template_name of this ClaimSource.  # noqa: E501
        :type: str
        """

        self._resource_claim_template_name = resource_claim_template_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClaimSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClaimSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
