# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PodResourceClaimStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'resource_claim_name': 'str'
    }

    attribute_map = {
        'name': 'name',
        'resource_claim_name': 'resourceClaimName'
    }

    def __init__(self, name=None, resource_claim_name=None):  # noqa: E501
        """PodResourceClaimStatus - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._resource_claim_name = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if resource_claim_name is not None:
            self.resource_claim_name = resource_claim_name

    @property
    def name(self):
        """Gets the name of this PodResourceClaimStatus.  # noqa: E501

        Name uniquely identifies this resource claim inside the pod. This must match the name of an entry in pod.spec.resourceClaims, which implies that the string must be a DNS_LABEL.  # noqa: E501

        :return: The name of this PodResourceClaimStatus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PodResourceClaimStatus.

        Name uniquely identifies this resource claim inside the pod. This must match the name of an entry in pod.spec.resourceClaims, which implies that the string must be a DNS_LABEL.  # noqa: E501

        :param name: The name of this PodResourceClaimStatus.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def resource_claim_name(self):
        """Gets the resource_claim_name of this PodResourceClaimStatus.  # noqa: E501

        ResourceClaimName is the name of the ResourceClaim that was generated for the Pod in the namespace of the Pod. It this is unset, then generating a ResourceClaim was not necessary. The pod.spec.resourceClaims entry can be ignored in this case.  +optional  # noqa: E501

        :return: The resource_claim_name of this PodResourceClaimStatus.  # noqa: E501
        :rtype: str
        """
        return self._resource_claim_name

    @resource_claim_name.setter
    def resource_claim_name(self, resource_claim_name):
        """Sets the resource_claim_name of this PodResourceClaimStatus.

        ResourceClaimName is the name of the ResourceClaim that was generated for the Pod in the namespace of the Pod. It this is unset, then generating a ResourceClaim was not necessary. The pod.spec.resourceClaims entry can be ignored in this case.  +optional  # noqa: E501

        :param resource_claim_name: The resource_claim_name of this PodResourceClaimStatus.  # noqa: E501
        :type: str
        """

        self._resource_claim_name = resource_claim_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PodResourceClaimStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PodResourceClaimStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
