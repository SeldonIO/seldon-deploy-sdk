# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'enabled': 'bool',
        'email_verified': 'bool',
        'creation_time': 'datetime'
    }

    attribute_map = {
        'username': 'username',
        'email': 'email',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'enabled': 'enabled',
        'email_verified': 'emailVerified',
        'creation_time': 'creationTime'
    }

    def __init__(self, username=None, email=None, first_name=None, last_name=None, enabled=None, email_verified=None, creation_time=None):  # noqa: E501
        """V1User - a model defined in Swagger"""  # noqa: E501

        self._username = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._enabled = None
        self._email_verified = None
        self._creation_time = None
        self.discriminator = None

        if username is not None:
            self.username = username
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if enabled is not None:
            self.enabled = enabled
        if email_verified is not None:
            self.email_verified = email_verified
        if creation_time is not None:
            self.creation_time = creation_time

    @property
    def username(self):
        """Gets the username of this V1User.  # noqa: E501


        :return: The username of this V1User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this V1User.


        :param username: The username of this V1User.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def email(self):
        """Gets the email of this V1User.  # noqa: E501


        :return: The email of this V1User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this V1User.


        :param email: The email of this V1User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this V1User.  # noqa: E501


        :return: The first_name of this V1User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this V1User.


        :param first_name: The first_name of this V1User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this V1User.  # noqa: E501


        :return: The last_name of this V1User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this V1User.


        :param last_name: The last_name of this V1User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def enabled(self):
        """Gets the enabled of this V1User.  # noqa: E501


        :return: The enabled of this V1User.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this V1User.


        :param enabled: The enabled of this V1User.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def email_verified(self):
        """Gets the email_verified of this V1User.  # noqa: E501


        :return: The email_verified of this V1User.  # noqa: E501
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this V1User.


        :param email_verified: The email_verified of this V1User.  # noqa: E501
        :type: bool
        """

        self._email_verified = email_verified

    @property
    def creation_time(self):
        """Gets the creation_time of this V1User.  # noqa: E501


        :return: The creation_time of this V1User.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this V1User.


        :param creation_time: The creation_time of this V1User.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
