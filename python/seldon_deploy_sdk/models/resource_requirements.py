# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ResourceRequirements(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'claims': 'list[ResourceClaim]',
        'limits': 'ResourceList',
        'requests': 'ResourceList'
    }

    attribute_map = {
        'claims': 'claims',
        'limits': 'limits',
        'requests': 'requests'
    }

    def __init__(self, claims=None, limits=None, requests=None):  # noqa: E501
        """ResourceRequirements - a model defined in Swagger"""  # noqa: E501

        self._claims = None
        self._limits = None
        self._requests = None
        self.discriminator = None

        if claims is not None:
            self.claims = claims
        if limits is not None:
            self.limits = limits
        if requests is not None:
            self.requests = requests

    @property
    def claims(self):
        """Gets the claims of this ResourceRequirements.  # noqa: E501

        Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.  This field is immutable. It can only be set for containers.  +listType=map +listMapKey=name +featureGate=DynamicResourceAllocation +optional  # noqa: E501

        :return: The claims of this ResourceRequirements.  # noqa: E501
        :rtype: list[ResourceClaim]
        """
        return self._claims

    @claims.setter
    def claims(self, claims):
        """Sets the claims of this ResourceRequirements.

        Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.  This field is immutable. It can only be set for containers.  +listType=map +listMapKey=name +featureGate=DynamicResourceAllocation +optional  # noqa: E501

        :param claims: The claims of this ResourceRequirements.  # noqa: E501
        :type: list[ResourceClaim]
        """

        self._claims = claims

    @property
    def limits(self):
        """Gets the limits of this ResourceRequirements.  # noqa: E501


        :return: The limits of this ResourceRequirements.  # noqa: E501
        :rtype: ResourceList
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this ResourceRequirements.


        :param limits: The limits of this ResourceRequirements.  # noqa: E501
        :type: ResourceList
        """

        self._limits = limits

    @property
    def requests(self):
        """Gets the requests of this ResourceRequirements.  # noqa: E501


        :return: The requests of this ResourceRequirements.  # noqa: E501
        :rtype: ResourceList
        """
        return self._requests

    @requests.setter
    def requests(self, requests):
        """Sets the requests of this ResourceRequirements.


        :param requests: The requests of this ResourceRequirements.  # noqa: E501
        :type: ResourceList
        """

        self._requests = requests

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceRequirements, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceRequirements):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
