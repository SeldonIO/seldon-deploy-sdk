# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1Secret(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'secret_name': 'str',
        'secret_type': 'V1SecretType',
        'bucket_secret_format': 'V1BucketSecretFormat'
    }

    attribute_map = {
        'secret_name': 'secretName',
        'secret_type': 'secretType',
        'bucket_secret_format': 'bucketSecretFormat'
    }

    def __init__(self, secret_name=None, secret_type=None, bucket_secret_format=None):  # noqa: E501
        """V1Secret - a model defined in Swagger"""  # noqa: E501

        self._secret_name = None
        self._secret_type = None
        self._bucket_secret_format = None
        self.discriminator = None

        if secret_name is not None:
            self.secret_name = secret_name
        if secret_type is not None:
            self.secret_type = secret_type
        if bucket_secret_format is not None:
            self.bucket_secret_format = bucket_secret_format

    @property
    def secret_name(self):
        """Gets the secret_name of this V1Secret.  # noqa: E501


        :return: The secret_name of this V1Secret.  # noqa: E501
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this V1Secret.


        :param secret_name: The secret_name of this V1Secret.  # noqa: E501
        :type: str
        """

        self._secret_name = secret_name

    @property
    def secret_type(self):
        """Gets the secret_type of this V1Secret.  # noqa: E501


        :return: The secret_type of this V1Secret.  # noqa: E501
        :rtype: V1SecretType
        """
        return self._secret_type

    @secret_type.setter
    def secret_type(self, secret_type):
        """Sets the secret_type of this V1Secret.


        :param secret_type: The secret_type of this V1Secret.  # noqa: E501
        :type: V1SecretType
        """

        self._secret_type = secret_type

    @property
    def bucket_secret_format(self):
        """Gets the bucket_secret_format of this V1Secret.  # noqa: E501

        Only available for bucket secrets.  # noqa: E501

        :return: The bucket_secret_format of this V1Secret.  # noqa: E501
        :rtype: V1BucketSecretFormat
        """
        return self._bucket_secret_format

    @bucket_secret_format.setter
    def bucket_secret_format(self, bucket_secret_format):
        """Sets the bucket_secret_format of this V1Secret.

        Only available for bucket secrets.  # noqa: E501

        :param bucket_secret_format: The bucket_secret_format of this V1Secret.  # noqa: E501
        :type: V1BucketSecretFormat
        """

        self._bucket_secret_format = bucket_secret_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Secret, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Secret):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
