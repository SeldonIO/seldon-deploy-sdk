# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DetectorDeploymentConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_source': 'str',
        'event_type': 'str',
        'http_port': 'str',
        'memory_requirement': 'str',
        'model_name': 'str',
        'prom_scraping': 'bool',
        'protocol': 'str',
        'reply_url': 'str',
        'user_permission': 'int'
    }

    attribute_map = {
        'event_source': 'event_source',
        'event_type': 'event_type',
        'http_port': 'http_port',
        'memory_requirement': 'memory_requirement',
        'model_name': 'model_name',
        'prom_scraping': 'prom_scraping',
        'protocol': 'protocol',
        'reply_url': 'reply_url',
        'user_permission': 'user_permission'
    }

    def __init__(self, event_source=None, event_type=None, http_port=None, memory_requirement=None, model_name=None, prom_scraping=None, protocol=None, reply_url=None, user_permission=None):  # noqa: E501
        """DetectorDeploymentConfiguration - a model defined in Swagger"""  # noqa: E501

        self._event_source = None
        self._event_type = None
        self._http_port = None
        self._memory_requirement = None
        self._model_name = None
        self._prom_scraping = None
        self._protocol = None
        self._reply_url = None
        self._user_permission = None
        self.discriminator = None

        if event_source is not None:
            self.event_source = event_source
        if event_type is not None:
            self.event_type = event_type
        if http_port is not None:
            self.http_port = http_port
        if memory_requirement is not None:
            self.memory_requirement = memory_requirement
        if model_name is not None:
            self.model_name = model_name
        if prom_scraping is not None:
            self.prom_scraping = prom_scraping
        if protocol is not None:
            self.protocol = protocol
        if reply_url is not None:
            self.reply_url = reply_url
        if user_permission is not None:
            self.user_permission = user_permission

    @property
    def event_source(self):
        """Gets the event_source of this DetectorDeploymentConfiguration.  # noqa: E501


        :return: The event_source of this DetectorDeploymentConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._event_source

    @event_source.setter
    def event_source(self, event_source):
        """Sets the event_source of this DetectorDeploymentConfiguration.


        :param event_source: The event_source of this DetectorDeploymentConfiguration.  # noqa: E501
        :type: str
        """

        self._event_source = event_source

    @property
    def event_type(self):
        """Gets the event_type of this DetectorDeploymentConfiguration.  # noqa: E501


        :return: The event_type of this DetectorDeploymentConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this DetectorDeploymentConfiguration.


        :param event_type: The event_type of this DetectorDeploymentConfiguration.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def http_port(self):
        """Gets the http_port of this DetectorDeploymentConfiguration.  # noqa: E501


        :return: The http_port of this DetectorDeploymentConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._http_port

    @http_port.setter
    def http_port(self, http_port):
        """Sets the http_port of this DetectorDeploymentConfiguration.


        :param http_port: The http_port of this DetectorDeploymentConfiguration.  # noqa: E501
        :type: str
        """

        self._http_port = http_port

    @property
    def memory_requirement(self):
        """Gets the memory_requirement of this DetectorDeploymentConfiguration.  # noqa: E501


        :return: The memory_requirement of this DetectorDeploymentConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._memory_requirement

    @memory_requirement.setter
    def memory_requirement(self, memory_requirement):
        """Sets the memory_requirement of this DetectorDeploymentConfiguration.


        :param memory_requirement: The memory_requirement of this DetectorDeploymentConfiguration.  # noqa: E501
        :type: str
        """

        self._memory_requirement = memory_requirement

    @property
    def model_name(self):
        """Gets the model_name of this DetectorDeploymentConfiguration.  # noqa: E501


        :return: The model_name of this DetectorDeploymentConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this DetectorDeploymentConfiguration.


        :param model_name: The model_name of this DetectorDeploymentConfiguration.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def prom_scraping(self):
        """Gets the prom_scraping of this DetectorDeploymentConfiguration.  # noqa: E501


        :return: The prom_scraping of this DetectorDeploymentConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._prom_scraping

    @prom_scraping.setter
    def prom_scraping(self, prom_scraping):
        """Sets the prom_scraping of this DetectorDeploymentConfiguration.


        :param prom_scraping: The prom_scraping of this DetectorDeploymentConfiguration.  # noqa: E501
        :type: bool
        """

        self._prom_scraping = prom_scraping

    @property
    def protocol(self):
        """Gets the protocol of this DetectorDeploymentConfiguration.  # noqa: E501


        :return: The protocol of this DetectorDeploymentConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this DetectorDeploymentConfiguration.


        :param protocol: The protocol of this DetectorDeploymentConfiguration.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def reply_url(self):
        """Gets the reply_url of this DetectorDeploymentConfiguration.  # noqa: E501


        :return: The reply_url of this DetectorDeploymentConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._reply_url

    @reply_url.setter
    def reply_url(self, reply_url):
        """Sets the reply_url of this DetectorDeploymentConfiguration.


        :param reply_url: The reply_url of this DetectorDeploymentConfiguration.  # noqa: E501
        :type: str
        """

        self._reply_url = reply_url

    @property
    def user_permission(self):
        """Gets the user_permission of this DetectorDeploymentConfiguration.  # noqa: E501


        :return: The user_permission of this DetectorDeploymentConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._user_permission

    @user_permission.setter
    def user_permission(self, user_permission):
        """Sets the user_permission of this DetectorDeploymentConfiguration.


        :param user_permission: The user_permission of this DetectorDeploymentConfiguration.  # noqa: E501
        :type: int
        """

        self._user_permission = user_permission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DetectorDeploymentConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetectorDeploymentConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
