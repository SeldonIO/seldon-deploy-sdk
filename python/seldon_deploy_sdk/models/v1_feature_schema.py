# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1FeatureSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'V1FeatureType',
        'data_type': 'V1DataType',
        'n_categories': 'str',
        'category_map': 'dict(str, str)',
        'schema': 'list[V1FeatureCategorySchema]',
        'shape': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'data_type': 'dataType',
        'n_categories': 'nCategories',
        'category_map': 'categoryMap',
        'schema': 'schema',
        'shape': 'shape'
    }

    def __init__(self, name=None, type=None, data_type=None, n_categories=None, category_map=None, schema=None, shape=None):  # noqa: E501
        """V1FeatureSchema - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._type = None
        self._data_type = None
        self._n_categories = None
        self._category_map = None
        self._schema = None
        self._shape = None
        self.discriminator = None

        self.name = name
        if type is not None:
            self.type = type
        if data_type is not None:
            self.data_type = data_type
        if n_categories is not None:
            self.n_categories = n_categories
        if category_map is not None:
            self.category_map = category_map
        if schema is not None:
            self.schema = schema
        if shape is not None:
            self.shape = shape

    @property
    def name(self):
        """Gets the name of this V1FeatureSchema.  # noqa: E501


        :return: The name of this V1FeatureSchema.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1FeatureSchema.


        :param name: The name of this V1FeatureSchema.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this V1FeatureSchema.  # noqa: E501


        :return: The type of this V1FeatureSchema.  # noqa: E501
        :rtype: V1FeatureType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1FeatureSchema.


        :param type: The type of this V1FeatureSchema.  # noqa: E501
        :type: V1FeatureType
        """

        self._type = type

    @property
    def data_type(self):
        """Gets the data_type of this V1FeatureSchema.  # noqa: E501


        :return: The data_type of this V1FeatureSchema.  # noqa: E501
        :rtype: V1DataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this V1FeatureSchema.


        :param data_type: The data_type of this V1FeatureSchema.  # noqa: E501
        :type: V1DataType
        """

        self._data_type = data_type

    @property
    def n_categories(self):
        """Gets the n_categories of this V1FeatureSchema.  # noqa: E501


        :return: The n_categories of this V1FeatureSchema.  # noqa: E501
        :rtype: str
        """
        return self._n_categories

    @n_categories.setter
    def n_categories(self, n_categories):
        """Sets the n_categories of this V1FeatureSchema.


        :param n_categories: The n_categories of this V1FeatureSchema.  # noqa: E501
        :type: str
        """

        self._n_categories = n_categories

    @property
    def category_map(self):
        """Gets the category_map of this V1FeatureSchema.  # noqa: E501


        :return: The category_map of this V1FeatureSchema.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._category_map

    @category_map.setter
    def category_map(self, category_map):
        """Sets the category_map of this V1FeatureSchema.


        :param category_map: The category_map of this V1FeatureSchema.  # noqa: E501
        :type: dict(str, str)
        """

        self._category_map = category_map

    @property
    def schema(self):
        """Gets the schema of this V1FeatureSchema.  # noqa: E501


        :return: The schema of this V1FeatureSchema.  # noqa: E501
        :rtype: list[V1FeatureCategorySchema]
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this V1FeatureSchema.


        :param schema: The schema of this V1FeatureSchema.  # noqa: E501
        :type: list[V1FeatureCategorySchema]
        """

        self._schema = schema

    @property
    def shape(self):
        """Gets the shape of this V1FeatureSchema.  # noqa: E501


        :return: The shape of this V1FeatureSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this V1FeatureSchema.


        :param shape: The shape of this V1FeatureSchema.  # noqa: E501
        :type: list[str]
        """

        self._shape = shape

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1FeatureSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1FeatureSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
