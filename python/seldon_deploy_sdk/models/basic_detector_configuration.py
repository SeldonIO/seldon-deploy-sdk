# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BasicDetectorConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'drift_batch_size': 'str',
        'drift_type_feature': 'bool',
        'env_secret_ref': 'str',
        'project': 'str',
        'storage_uri': 'str'
    }

    attribute_map = {
        'drift_batch_size': 'drift_batch_size',
        'drift_type_feature': 'drift_type_feature',
        'env_secret_ref': 'env_secret_ref',
        'project': 'project',
        'storage_uri': 'storage_uri'
    }

    def __init__(self, drift_batch_size=None, drift_type_feature=None, env_secret_ref=None, project=None, storage_uri=None):  # noqa: E501
        """BasicDetectorConfiguration - a model defined in Swagger"""  # noqa: E501

        self._drift_batch_size = None
        self._drift_type_feature = None
        self._env_secret_ref = None
        self._project = None
        self._storage_uri = None
        self.discriminator = None

        if drift_batch_size is not None:
            self.drift_batch_size = drift_batch_size
        if drift_type_feature is not None:
            self.drift_type_feature = drift_type_feature
        if env_secret_ref is not None:
            self.env_secret_ref = env_secret_ref
        if project is not None:
            self.project = project
        if storage_uri is not None:
            self.storage_uri = storage_uri

    @property
    def drift_batch_size(self):
        """Gets the drift_batch_size of this BasicDetectorConfiguration.  # noqa: E501


        :return: The drift_batch_size of this BasicDetectorConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._drift_batch_size

    @drift_batch_size.setter
    def drift_batch_size(self, drift_batch_size):
        """Sets the drift_batch_size of this BasicDetectorConfiguration.


        :param drift_batch_size: The drift_batch_size of this BasicDetectorConfiguration.  # noqa: E501
        :type: str
        """

        self._drift_batch_size = drift_batch_size

    @property
    def drift_type_feature(self):
        """Gets the drift_type_feature of this BasicDetectorConfiguration.  # noqa: E501


        :return: The drift_type_feature of this BasicDetectorConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._drift_type_feature

    @drift_type_feature.setter
    def drift_type_feature(self, drift_type_feature):
        """Sets the drift_type_feature of this BasicDetectorConfiguration.


        :param drift_type_feature: The drift_type_feature of this BasicDetectorConfiguration.  # noqa: E501
        :type: bool
        """

        self._drift_type_feature = drift_type_feature

    @property
    def env_secret_ref(self):
        """Gets the env_secret_ref of this BasicDetectorConfiguration.  # noqa: E501


        :return: The env_secret_ref of this BasicDetectorConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._env_secret_ref

    @env_secret_ref.setter
    def env_secret_ref(self, env_secret_ref):
        """Sets the env_secret_ref of this BasicDetectorConfiguration.


        :param env_secret_ref: The env_secret_ref of this BasicDetectorConfiguration.  # noqa: E501
        :type: str
        """

        self._env_secret_ref = env_secret_ref

    @property
    def project(self):
        """Gets the project of this BasicDetectorConfiguration.  # noqa: E501


        :return: The project of this BasicDetectorConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this BasicDetectorConfiguration.


        :param project: The project of this BasicDetectorConfiguration.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def storage_uri(self):
        """Gets the storage_uri of this BasicDetectorConfiguration.  # noqa: E501


        :return: The storage_uri of this BasicDetectorConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._storage_uri

    @storage_uri.setter
    def storage_uri(self, storage_uri):
        """Sets the storage_uri of this BasicDetectorConfiguration.


        :param storage_uri: The storage_uri of this BasicDetectorConfiguration.  # noqa: E501
        :type: str
        """

        self._storage_uri = storage_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BasicDetectorConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasicDetectorConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
