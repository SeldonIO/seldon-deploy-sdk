# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClusterTrustBundleProjection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label_selector': 'LabelSelector',
        'name': 'str',
        'optional': 'bool',
        'path': 'str',
        'signer_name': 'str'
    }

    attribute_map = {
        'label_selector': 'labelSelector',
        'name': 'name',
        'optional': 'optional',
        'path': 'path',
        'signer_name': 'signerName'
    }

    def __init__(self, label_selector=None, name=None, optional=None, path=None, signer_name=None):  # noqa: E501
        """ClusterTrustBundleProjection - a model defined in Swagger"""  # noqa: E501

        self._label_selector = None
        self._name = None
        self._optional = None
        self._path = None
        self._signer_name = None
        self.discriminator = None

        if label_selector is not None:
            self.label_selector = label_selector
        if name is not None:
            self.name = name
        if optional is not None:
            self.optional = optional
        if path is not None:
            self.path = path
        if signer_name is not None:
            self.signer_name = signer_name

    @property
    def label_selector(self):
        """Gets the label_selector of this ClusterTrustBundleProjection.  # noqa: E501


        :return: The label_selector of this ClusterTrustBundleProjection.  # noqa: E501
        :rtype: LabelSelector
        """
        return self._label_selector

    @label_selector.setter
    def label_selector(self, label_selector):
        """Sets the label_selector of this ClusterTrustBundleProjection.


        :param label_selector: The label_selector of this ClusterTrustBundleProjection.  # noqa: E501
        :type: LabelSelector
        """

        self._label_selector = label_selector

    @property
    def name(self):
        """Gets the name of this ClusterTrustBundleProjection.  # noqa: E501

        Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and labelSelector. +optional  # noqa: E501

        :return: The name of this ClusterTrustBundleProjection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusterTrustBundleProjection.

        Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and labelSelector. +optional  # noqa: E501

        :param name: The name of this ClusterTrustBundleProjection.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def optional(self):
        """Gets the optional of this ClusterTrustBundleProjection.  # noqa: E501

        If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles. +optional  # noqa: E501

        :return: The optional of this ClusterTrustBundleProjection.  # noqa: E501
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this ClusterTrustBundleProjection.

        If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles. +optional  # noqa: E501

        :param optional: The optional of this ClusterTrustBundleProjection.  # noqa: E501
        :type: bool
        """

        self._optional = optional

    @property
    def path(self):
        """Gets the path of this ClusterTrustBundleProjection.  # noqa: E501

        Relative path from the volume root to write the bundle.  # noqa: E501

        :return: The path of this ClusterTrustBundleProjection.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ClusterTrustBundleProjection.

        Relative path from the volume root to write the bundle.  # noqa: E501

        :param path: The path of this ClusterTrustBundleProjection.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def signer_name(self):
        """Gets the signer_name of this ClusterTrustBundleProjection.  # noqa: E501

        Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The contents of all selected ClusterTrustBundles will be unified and deduplicated. +optional  # noqa: E501

        :return: The signer_name of this ClusterTrustBundleProjection.  # noqa: E501
        :rtype: str
        """
        return self._signer_name

    @signer_name.setter
    def signer_name(self, signer_name):
        """Sets the signer_name of this ClusterTrustBundleProjection.

        Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The contents of all selected ClusterTrustBundles will be unified and deduplicated. +optional  # noqa: E501

        :param signer_name: The signer_name of this ClusterTrustBundleProjection.  # noqa: E501
        :type: str
        """

        self._signer_name = signer_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterTrustBundleProjection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterTrustBundleProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
