# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ContainerResizePolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_name': 'ResourceName',
        'restart_policy': 'ResourceResizeRestartPolicy'
    }

    attribute_map = {
        'resource_name': 'resourceName',
        'restart_policy': 'restartPolicy'
    }

    def __init__(self, resource_name=None, restart_policy=None):  # noqa: E501
        """ContainerResizePolicy - a model defined in Swagger"""  # noqa: E501

        self._resource_name = None
        self._restart_policy = None
        self.discriminator = None

        if resource_name is not None:
            self.resource_name = resource_name
        if restart_policy is not None:
            self.restart_policy = restart_policy

    @property
    def resource_name(self):
        """Gets the resource_name of this ContainerResizePolicy.  # noqa: E501


        :return: The resource_name of this ContainerResizePolicy.  # noqa: E501
        :rtype: ResourceName
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this ContainerResizePolicy.


        :param resource_name: The resource_name of this ContainerResizePolicy.  # noqa: E501
        :type: ResourceName
        """

        self._resource_name = resource_name

    @property
    def restart_policy(self):
        """Gets the restart_policy of this ContainerResizePolicy.  # noqa: E501


        :return: The restart_policy of this ContainerResizePolicy.  # noqa: E501
        :rtype: ResourceResizeRestartPolicy
        """
        return self._restart_policy

    @restart_policy.setter
    def restart_policy(self, restart_policy):
        """Sets the restart_policy of this ContainerResizePolicy.


        :param restart_policy: The restart_policy of this ContainerResizePolicy.  # noqa: E501
        :type: ResourceResizeRestartPolicy
        """

        self._restart_policy = restart_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContainerResizePolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerResizePolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
