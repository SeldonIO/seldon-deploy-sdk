# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HPAScalingPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'period_seconds': 'int',
        'type': 'HPAScalingPolicyType',
        'value': 'int'
    }

    attribute_map = {
        'period_seconds': 'periodSeconds',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, period_seconds=None, type=None, value=None):  # noqa: E501
        """HPAScalingPolicy - a model defined in Swagger"""  # noqa: E501

        self._period_seconds = None
        self._type = None
        self._value = None
        self.discriminator = None

        if period_seconds is not None:
            self.period_seconds = period_seconds
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value

    @property
    def period_seconds(self):
        """Gets the period_seconds of this HPAScalingPolicy.  # noqa: E501

        periodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).  # noqa: E501

        :return: The period_seconds of this HPAScalingPolicy.  # noqa: E501
        :rtype: int
        """
        return self._period_seconds

    @period_seconds.setter
    def period_seconds(self, period_seconds):
        """Sets the period_seconds of this HPAScalingPolicy.

        periodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).  # noqa: E501

        :param period_seconds: The period_seconds of this HPAScalingPolicy.  # noqa: E501
        :type: int
        """

        self._period_seconds = period_seconds

    @property
    def type(self):
        """Gets the type of this HPAScalingPolicy.  # noqa: E501


        :return: The type of this HPAScalingPolicy.  # noqa: E501
        :rtype: HPAScalingPolicyType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HPAScalingPolicy.


        :param type: The type of this HPAScalingPolicy.  # noqa: E501
        :type: HPAScalingPolicyType
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this HPAScalingPolicy.  # noqa: E501

        value contains the amount of change which is permitted by the policy. It must be greater than zero  # noqa: E501

        :return: The value of this HPAScalingPolicy.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this HPAScalingPolicy.

        value contains the amount of change which is permitted by the policy. It must be greater than zero  # noqa: E501

        :param value: The value of this HPAScalingPolicy.  # noqa: E501
        :type: int
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HPAScalingPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HPAScalingPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
