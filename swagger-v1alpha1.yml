basePath: /seldon-deploy/api/v1alpha1
consumes:
  - application/json
definitions:
  AWSElasticBlockStoreVolumeSource:
    description: |-
      An AWS EBS disk must exist before mounting to a container. The disk
      must also be in the same AWS zone as the kubelet. An AWS EBS disk
      can only be mounted as read/write once. AWS EBS volumes support
      ownership management and SELinux relabeling.
    properties:
      fsType:
        description: |-
          Filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      partition:
        description: |-
          The partition in the volume that you want to mount.
          If omitted, the default is to mount by volume name.
          Examples: For volume /dev/sda1, you specify the partition as "1".
          Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
          +optional
        format: int32
        type: integer
      readOnly:
        description: |-
          Specify "true" to force and set the ReadOnly property in VolumeMounts to "true".
          If omitted, the default is "false".
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
          +optional
        type: boolean
      volumeID:
        description: |-
          Unique ID of the persistent disk resource in AWS (Amazon EBS volume).
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        type: string
    title: Represents a Persistent Disk resource in AWS.
    type: object
  AdvancedConfig:
    description: AdvancedConfig specifies advance scaling options
    properties:
      horizontalPodAutoscalerConfig:
        $ref: '#/definitions/HorizontalPodAutoscalerConfig'
      restoreToOriginalReplicaCount:
        description: +optional
        type: boolean
    type: object
  Affinity:
    properties:
      nodeAffinity:
        $ref: '#/definitions/NodeAffinity'
      podAffinity:
        $ref: '#/definitions/PodAffinity'
      podAntiAffinity:
        $ref: '#/definitions/PodAntiAffinity'
    title: Affinity is a group of affinity scheduling rules.
    type: object
  AlibiExplainerType:
    type: string
  ApplicationLog:
    description: |-
      ApplicationLog represents the message and timestamp of a single
      application log entry.
    properties:
      message:
        type: string
      timestamp:
        format: date-time
        type: string
    type: object
  ApplicationLogsParams:
    description: |-
      ApplicationLogsParams describes a set of parameters that can be
      used to build a search query for an application's logs.
      In most cases, only ContainerId, From, and Size are required in
      order to create a search query.
    properties:
      container_id:
        type: string
      container_name:
        type: string
      deployment_namespace:
        type: string
      from:
        format: int64
        type: integer
      pod_name:
        type: string
      size:
        format: int64
        type: integer
    type: object
  ApplicationLogsResponse:
    description: |-
      ApplicationLogsResponse represents the collection of application logs
      and their total size after being parsed from their raw forms
      e.g. from json strings or map[string]interface{} types.
    properties:
      logs:
        items:
          $ref: '#/definitions/ApplicationLog'
        type: array
      total:
        format: int64
        type: integer
    type: object
  AuditLog:
    properties:
      AuthorName:
        type: string
      AuthorWhen:
        format: date-time
        type: string
      CommitterName:
        type: string
      CommitterWhen:
        format: date-time
        type: string
      Hash:
        type: string
    type: object
  AzureDataDiskCachingMode:
    type: string
  AzureDataDiskKind:
    type: string
  AzureDiskVolumeSource:
    properties:
      cachingMode:
        $ref: '#/definitions/AzureDataDiskCachingMode'
      diskName:
        description: The Name of the data disk in the blob storage
        type: string
      diskURI:
        description: The URI the data disk in the blob storage
        type: string
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          +optional
        type: string
      kind:
        $ref: '#/definitions/AzureDataDiskKind'
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
    title: AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    type: object
  AzureFileVolumeSource:
    properties:
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      secretName:
        description: the name of secret that contains Azure Storage Account Name and Key
        type: string
      shareName:
        description: Share Name
        type: string
    title: AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
    type: object
  BasicDetectorConfiguration:
    properties:
      drift_batch_size:
        type: string
      drift_type_feature:
        type: boolean
      env_secret_ref:
        type: string
      storage_uri:
        type: string
    type: object
  BatchJobDefinition:
    description: BatchJobDefinition is a common interface for BatchJob v1 and v2 which specifies necessary arguments
    properties:
      batchDataType:
        description: Batch Data Type (data, json or str)
        type: string
      batchInterval:
        description: Interval between batches
        format: double
        type: number
      batchMethod:
        description: Batch Method (predict)
        type: string
      batchPayloadType:
        description: Batch Payload Type (ndarray, tensor, tftensor, v2raw, v2binary - only if DataType=data)
        type: string
      batchRetries:
        description: Number of retries for each instance
        format: int64
        type: integer
      batchSize:
        description: Size of the batch (number of predictions per request)
        format: int64
        type: integer
      batchTransportProtocol:
        description: Batch Transport Protocol (rest or grpc)
        type: string
      batchWorkers:
        description: Number of batch workers
        format: int64
        type: integer
      inputData:
        description: S3 URI of input data file
        type: string
      objectStoreSecretName:
        description: name of Kubernetes Secret with S3 credentials
        type: string
      outputData:
        description: S3 URI of output data file
        type: string
      pvcSize:
        description: Size of PVC required for the batch job
        type: string
    type: object
  BatchJobDescription:
    description: BatchJobDescription describes the workflow of the batch job
    properties:
      FinishedAt:
        $ref: '#/definitions/Time'
      StartedAt:
        $ref: '#/definitions/Time'
      workflowName:
        description: Name of related Argo Workflow
        type: string
      workflowStatus:
        $ref: '#/definitions/NodePhase'
      workflowUID:
        $ref: '#/definitions/UID'
    type: object
  BatchJobDescriptionList:
    description: BatchJobDescriptionList is a list of BatchJobDescription
    items:
      $ref: '#/definitions/BatchJobDescription'
    type: array
  BatchJobGetResponse:
    description: |-
      BatchJobGetResponse represents the full description and definition of a
      retrieved batch job
    properties:
      Definition:
        $ref: '#/definitions/BatchJobDefinition'
      Description:
        $ref: '#/definitions/BatchJobDescription'
    type: object
  BatchJobPostResponse:
    description: |-
      BatchJobPostResponse represents the name and uid of the batch job
      created after a post request
    properties:
      workflowName:
        description: |-
          Name of created Argo Workflow
          in: body
        type: string
      workflowUID:
        $ref: '#/definitions/UID'
    type: object
  BatchJobsListResponse:
    description: |-
      BatchJobsListResponse represents the list of batch descriptions and their
      limit, page, and page counts.
    properties:
      batchJobs:
        $ref: '#/definitions/BatchJobDescriptionList'
      limit:
        description: |-
          Limit of the request
          in: body
        format: int64
        type: integer
      page:
        description: |-
          Returned Page (counting from 0)
          in: body
        format: int64
        type: integer
      pagesCount:
        description: |-
          Number of available pages (Page = 0, ..., PagesCount - 1)
          in: body
        format: int64
        type: integer
    type: object
  CSIVolumeSource:
    description: Represents a source location of a volume to mount, managed by an external CSI driver
    properties:
      driver:
        description: |-
          Driver is the name of the CSI driver that handles this volume.
          Consult with your admin for the correct name as registered in the cluster.
        type: string
      fsType:
        description: |-
          Filesystem type to mount. Ex. "ext4", "xfs", "ntfs".
          If not provided, the empty value is passed to the associated CSI driver
          which will determine the default filesystem to apply.
          +optional
        type: string
      nodePublishSecretRef:
        $ref: '#/definitions/LocalObjectReference'
      readOnly:
        description: |-
          Specifies a read-only configuration for the volume.
          Defaults to false (read/write).
          +optional
        type: boolean
      volumeAttributes:
        additionalProperties:
          type: string
        description: |-
          VolumeAttributes stores driver-specific properties that are passed to the CSI
          driver. Consult your driver's documentation for supported values.
          +optional
        type: object
    type: object
  Capabilities:
    properties:
      add:
        description: |-
          Added capabilities
          +optional
        items:
          $ref: '#/definitions/Capability'
        type: array
      drop:
        description: |-
          Removed capabilities
          +optional
        items:
          $ref: '#/definitions/Capability'
        type: array
    title: Adds and removes POSIX capabilities from running containers.
    type: object
  Capability:
    description: Capability represent POSIX capabilities type
    type: string
  CephFSVolumeSource:
    description: |-
      Represents a Ceph Filesystem mount that lasts the lifetime of a pod
      Cephfs volumes do not support ownership management or SELinux relabeling.
    properties:
      monitors:
        description: |-
          Required: Monitors is a collection of Ceph monitors
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        items:
          type: string
        type: array
      path:
        description: |-
          Optional: Used as the mounted root, rather than the full Ceph tree, default is /
          +optional
        type: string
      readOnly:
        description: |-
          Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          +optional
        type: boolean
      secretFile:
        description: |-
          Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          +optional
        type: string
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
      user:
        description: |-
          Optional: User is the rados user name, default is admin
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          +optional
        type: string
    type: object
  CinderVolumeSource:
    description: |-
      A Cinder volume must exist before mounting to a container.
      The volume must also be in the same region as the kubelet.
      Cinder volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
          +optional
        type: string
      readOnly:
        description: |-
          Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
          +optional
        type: boolean
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
      volumeID:
        description: |-
          volume id used to identify the volume in cinder.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        type: string
    title: Represents a cinder volume resource in Openstack.
    type: object
  ClientIPConfig:
    properties:
      timeoutSeconds:
        description: |-
          timeoutSeconds specifies the seconds of ClientIP type session sticky time.
          The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
          Default value is 10800(for 3 hours).
          +optional
        format: int32
        type: integer
    title: ClientIPConfig represents the configurations of Client IP based session affinity.
    type: object
  ClusterInfo:
    properties:
      Namespaces:
        items:
          $ref: '#/definitions/Namespace'
        type: array
    type: object
  Component:
    properties:
      component:
        type: string
      deployments:
        $ref: '#/definitions/DeploymentList'
      pods:
        $ref: '#/definitions/PodList'
      services:
        $ref: '#/definitions/ServiceList'
    type: object
  ConditionStatus:
    type: string
  Conditions:
    $ref: '#/definitions/Conditions'
    title: Conditions is a simple wrapper around apis.Conditions to implement duck.Implementable.
  ConfigMapEnvSource:
    description: |-
      The contents of the target ConfigMap's Data field will represent the
      key-value pairs as environment variables.
    properties:
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the ConfigMap must be defined
          +optional
        type: boolean
    title: |-
      ConfigMapEnvSource selects a ConfigMap to populate the environment
      variables with.
    type: object
  ConfigMapKeySelector:
    properties:
      key:
        description: The key to select.
        type: string
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the ConfigMap or its key must be defined
          +optional
        type: boolean
    title: Selects a key from a ConfigMap.
    type: object
  ConfigMapProjection:
    description: |-
      The contents of the target ConfigMap's Data field will be presented in a
      projected volume as files using the keys in the Data field as the file names,
      unless the items element is populated with specific mappings of keys to paths.
      Note that this is identical to a configmap volume source without the default
      mode.
    properties:
      items:
        description: |-
          If unspecified, each key-value pair in the Data field of the referenced
          ConfigMap will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the ConfigMap,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/KeyToPath'
        type: array
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the ConfigMap or its keys must be defined
          +optional
        type: boolean
    title: Adapts a ConfigMap into a projected volume.
    type: object
  ConfigMapVolumeSource:
    description: |-
      The contents of the target ConfigMap's Data field will be presented in a
      volume as files using the keys in the Data field as the file names, unless
      the items element is populated with specific mappings of keys to paths.
      ConfigMap volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        description: |-
          Optional: mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        format: int32
        type: integer
      items:
        description: |-
          If unspecified, each key-value pair in the Data field of the referenced
          ConfigMap will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the ConfigMap,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/KeyToPath'
        type: array
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the ConfigMap or its keys must be defined
          +optional
        type: boolean
    title: Adapts a ConfigMap into a volume.
    type: object
  Container:
    properties:
      args:
        description: |-
          Arguments to the entrypoint.
          The docker image's CMD is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax
          can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
          regardless of whether the variable exists or not.
          Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      command:
        description: |-
          Entrypoint array. Not executed within a shell.
          The docker image's ENTRYPOINT is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax
          can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
          regardless of whether the variable exists or not.
          Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      env:
        description: |-
          List of environment variables to set in the container.
          Cannot be updated.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/EnvVar'
        type: array
      envFrom:
        description: |-
          List of sources to populate environment variables in the container.
          The keys defined within a source must be a C_IDENTIFIER. All invalid keys
          will be reported as an event when the container is starting. When a key exists in multiple
          sources, the value associated with the last source will take precedence.
          Values defined by an Env with a duplicate key will take precedence.
          Cannot be updated.
          +optional
        items:
          $ref: '#/definitions/EnvFromSource'
        type: array
      image:
        description: |-
          Docker image name.
          More info: https://kubernetes.io/docs/concepts/containers/images
          This field is optional to allow higher level config management to default or override
          container images in workload controllers like Deployments and StatefulSets.
          +optional
        type: string
      imagePullPolicy:
        $ref: '#/definitions/PullPolicy'
      lifecycle:
        $ref: '#/definitions/Lifecycle'
      livenessProbe:
        $ref: '#/definitions/Probe'
      name:
        description: |-
          Name of the container specified as a DNS_LABEL.
          Each container in a pod must have a unique name (DNS_LABEL).
          Cannot be updated.
        type: string
      ports:
        description: |-
          List of ports to expose from the container. Exposing a port here gives
          the system additional information about the network connections a
          container uses, but is primarily informational. Not specifying a port here
          DOES NOT prevent that port from being exposed. Any port which is
          listening on the default "0.0.0.0" address inside a container will be
          accessible from the network.
          Cannot be updated.
          +optional
          +patchMergeKey=containerPort
          +patchStrategy=merge
          +listType=map
          +listMapKey=containerPort
          +listMapKey=protocol
        items:
          $ref: '#/definitions/ContainerPort'
        type: array
      readinessProbe:
        $ref: '#/definitions/Probe'
      resources:
        $ref: '#/definitions/ResourceRequirements'
      securityContext:
        $ref: '#/definitions/SecurityContext'
      startupProbe:
        $ref: '#/definitions/Probe'
      stdin:
        description: |-
          Whether this container should allocate a buffer for stdin in the container runtime. If this
          is not set, reads from stdin in the container will always result in EOF.
          Default is false.
          +optional
        type: boolean
      stdinOnce:
        description: |-
          Whether the container runtime should close the stdin channel after it has been opened by
          a single attach. When stdin is true the stdin stream will remain open across multiple attach
          sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
          first client attaches to stdin, and then remains open and accepts data until the client disconnects,
          at which time stdin is closed and remains closed until the container is restarted. If this
          flag is false, a container processes that reads from stdin will never receive an EOF.
          Default is false
          +optional
        type: boolean
      terminationMessagePath:
        description: |-
          Optional: Path at which the file to which the container's termination message
          will be written is mounted into the container's filesystem.
          Message written is intended to be brief final status, such as an assertion failure message.
          Will be truncated by the node if greater than 4096 bytes. The total message length across
          all containers will be limited to 12kb.
          Defaults to /dev/termination-log.
          Cannot be updated.
          +optional
        type: string
      terminationMessagePolicy:
        $ref: '#/definitions/TerminationMessagePolicy'
      tty:
        description: |-
          Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
          Default is false.
          +optional
        type: boolean
      volumeDevices:
        description: |-
          volumeDevices is the list of block devices to be used by the container.
          +patchMergeKey=devicePath
          +patchStrategy=merge
          +optional
        items:
          $ref: '#/definitions/VolumeDevice'
        type: array
      volumeMounts:
        description: |-
          Pod volumes to mount into the container's filesystem.
          Cannot be updated.
          +optional
          +patchMergeKey=mountPath
          +patchStrategy=merge
        items:
          $ref: '#/definitions/VolumeMount'
        type: array
      workingDir:
        description: |-
          Container's working directory.
          If not specified, the container runtime's default will be used, which
          might be configured in the container image.
          Cannot be updated.
          +optional
        type: string
    title: A single application container that you want to run within a pod.
    type: object
  ContainerPort:
    properties:
      containerPort:
        description: |-
          Number of port to expose on the pod's IP address.
          This must be a valid port number, 0 < x < 65536.
        format: int32
        type: integer
      hostIP:
        description: |-
          What host IP to bind the external port to.
          +optional
        type: string
      hostPort:
        description: |-
          Number of port to expose on the host.
          If specified, this must be a valid port number, 0 < x < 65536.
          If HostNetwork is specified, this must match ContainerPort.
          Most containers do not need this.
          +optional
        format: int32
        type: integer
      name:
        description: |-
          If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
          named port in a pod must have a unique name. Name for the port that can be
          referred to by services.
          +optional
        type: string
      protocol:
        $ref: '#/definitions/Protocol'
    title: ContainerPort represents a network port in a single container.
    type: object
  ContainerState:
    description: |-
      Only one of its members may be specified.
      If none of them is specified, the default one is ContainerStateWaiting.
    properties:
      running:
        $ref: '#/definitions/ContainerStateRunning'
      terminated:
        $ref: '#/definitions/ContainerStateTerminated'
      waiting:
        $ref: '#/definitions/ContainerStateWaiting'
    title: ContainerState holds a possible state of container.
    type: object
  ContainerStateRunning:
    properties:
      startedAt:
        $ref: '#/definitions/Time'
    title: ContainerStateRunning is a running state of a container.
    type: object
  ContainerStateTerminated:
    properties:
      containerID:
        description: |-
          Container's ID in the format 'docker://<container_id>'
          +optional
        type: string
      exitCode:
        description: Exit status from the last termination of the container
        format: int32
        type: integer
      finishedAt:
        $ref: '#/definitions/Time'
      message:
        description: |-
          Message regarding the last termination of the container
          +optional
        type: string
      reason:
        description: |-
          (brief) reason from the last termination of the container
          +optional
        type: string
      signal:
        description: |-
          Signal from the last termination of the container
          +optional
        format: int32
        type: integer
      startedAt:
        $ref: '#/definitions/Time'
    title: ContainerStateTerminated is a terminated state of a container.
    type: object
  ContainerStateWaiting:
    properties:
      message:
        description: |-
          Message regarding why the container is not yet running.
          +optional
        type: string
      reason:
        description: |-
          (brief) reason the container is not yet running.
          +optional
        type: string
    title: ContainerStateWaiting is a waiting state of a container.
    type: object
  ContainerStatus:
    properties:
      containerID:
        description: |-
          Container's ID in the format 'docker://<container_id>'.
          +optional
        type: string
      image:
        description: |-
          The image the container is running.
          More info: https://kubernetes.io/docs/concepts/containers/images
          TODO(dchen1107): Which image the container is running with?
        type: string
      imageID:
        description: ImageID of the container's image.
        type: string
      lastState:
        $ref: '#/definitions/ContainerState'
      name:
        description: |-
          This must be a DNS_LABEL. Each container in a pod must have a unique name.
          Cannot be updated.
        type: string
      ready:
        description: Specifies whether the container has passed its readiness probe.
        type: boolean
      restartCount:
        description: |-
          The number of times the container has been restarted, currently based on
          the number of dead containers that have not yet been removed.
          Note that this is calculated from dead containers. But those containers are subject to
          garbage collection. This value will get capped at 5 by GC.
        format: int32
        type: integer
      started:
        description: |-
          Specifies whether the container has passed its startup probe.
          Initialized as false, becomes true after startupProbe is considered successful.
          Resets to false when the container is restarted, or if kubelet loses state temporarily.
          Is always true when no startupProbe is defined.
          +optional
        type: boolean
      state:
        $ref: '#/definitions/ContainerState'
    title: ContainerStatus contains details for the current status of this container.
    type: object
  CrossVersionObjectReference:
    properties:
      apiVersion:
        description: |-
          API version of the referent
          +optional
        type: string
      kind:
        description: 'Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"'
        type: string
      name:
        description: 'Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names'
        type: string
    title: CrossVersionObjectReference contains enough information to let you identify the referred resource.
    type: object
  DNSPolicy:
    title: DNSPolicy defines how a pod's DNS will be configured.
    type: string
  Deployment:
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: http://kubernetes.io/docs/user-guide/annotations
          +optional
        type: object
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      clusterName:
        description: |-
          The name of the cluster which the object belongs to.
          This is used to distinguish resources with same name and namespace in different clusters.
          This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
          +optional
        type: string
      creationTimestamp:
        $ref: '#/definitions/Time'
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        format: int64
        type: integer
      deletionTimestamp:
        $ref: '#/definitions/Time'
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
        items:
          type: string
        type: array
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will
          NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
          ServerTimeout indicating a unique name could not be found in the time allotted, and the client
          should retry (optionally after the time indicated in the Retry-After header).

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
        type: string
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        format: int64
        type: integer
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: http://kubernetes.io/docs/user-guide/labels
          +optional
        type: object
      managedFields:
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
        items:
          $ref: '#/definitions/ManagedFieldsEntry'
        type: array
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
          +optional
        type: string
      namespace:
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/namespaces
          +optional
        type: string
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
        items:
          $ref: '#/definitions/OwnerReference'
        type: array
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          SelfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
      spec:
        $ref: '#/definitions/DeploymentSpec'
      status:
        $ref: '#/definitions/DeploymentStatus'
      uid:
        $ref: '#/definitions/UID'
    title: Deployment enables declarative updates for Pods and ReplicaSets.
    type: object
  DeploymentFeatureData:
    description: DeploymentFeatureData represents a deployment level feature data
    properties:
      aggregate_over_time:
        description: AggregateOverTime is a boolean to decide if the distribution response is to be aggregated over the time period selected
        type: boolean
      deployment_endpoint:
        description: DeploymentEndpoint refers to endpoint/predictor name relevant to the feature distribution query
        type: string
      deployment_kind:
        description: DeploymentType refers to kubernetes kind of the deployment relevant to the feature distribution query
        type: string
      deployment_name:
        description: DeploymentName refers to name of the deployment relevant to the feature distribution query
        type: string
      deployment_namespace:
        description: DeploymentNamespace refers to namespace of the deployment relevant to the feature distribution query
        type: string
      deployment_node:
        description: DeploymentNode refers to node name relevant to the feature distribution query
        type: string
      feature:
        description: FeatureName refers to the name of feature as per the model predictions schema
        type: string
      filters:
        description: Filters is a set of time, feature and/or outlier filters for the distribution/stats query
        items:
          $ref: '#/definitions/FeatureFilter'
        type: array
      interaction:
        $ref: '#/definitions/FeatureInteraction'
      parameters:
        $ref: '#/definitions/FeatureDistributionParameters'
      reference_data:
        description: ReferenceData is a boolean to compute stats and distributions over reference data or inference data (false by default)
        type: boolean
    type: object
  DeploymentList:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      continue:
        description: |-
          continue may be set if the user set a limit on the number of items returned, and indicates that
          the server has more data available. The value is opaque and may be used to issue another request
          to the endpoint that served this list to retrieve the next set of available objects. Continuing a
          consistent list may not be possible if the server configuration has changed or more than a few
          minutes have passed. The resourceVersion field returned when using this continue value will be
          identical to the value in the first response, unless you have received this token from an error
          message.
        type: string
      items:
        description: Items is the list of Deployments.
        items:
          $ref: '#/definitions/Deployment'
        type: array
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      remainingItemCount:
        description: |-
          remainingItemCount is the number of subsequent items in the list which are not included in this
          list response. If the list request contained label or field selectors, then the number of
          remaining items is unknown and the field will be left unset and omitted during serialization.
          If the list is complete (either because it is not chunking or because this is the last chunk),
          then there are no more remaining items and this field will be left unset and omitted during
          serialization.
          Servers older than v1.15 do not set this field.
          The intended use of the remainingItemCount is *estimating* the size of a collection. Clients
          should not rely on the remainingItemCount to be set or to be exact.
          +optional
        format: int64
        type: integer
      resourceVersion:
        description: |-
          String that identifies the server's internal version of this object that
          can be used by clients to determine when objects have changed.
          Value must be treated as opaque by clients and passed unmodified back to the server.
          Populated by the system.
          Read-only.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          selfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
    title: DeploymentList is a list of Deployments.
    type: object
  DeploymentSpec:
    properties:
      minReadySeconds:
        description: |-
          Minimum number of seconds for which a newly created pod should be ready
          without any of its container crashing, for it to be considered available.
          Defaults to 0 (pod will be considered available as soon as it is ready)
          +optional
        format: int32
        type: integer
      paused:
        description: |-
          Indicates that the deployment is paused.
          +optional
        type: boolean
      progressDeadlineSeconds:
        description: |-
          The maximum time in seconds for a deployment to make progress before it
          is considered to be failed. The deployment controller will continue to
          process failed deployments and a condition with a ProgressDeadlineExceeded
          reason will be surfaced in the deployment status. Note that progress will
          not be estimated during the time a deployment is paused. Defaults to 600s.
        format: int32
        type: integer
      replicas:
        description: |-
          Number of desired pods. This is a pointer to distinguish between explicit
          zero and not specified. Defaults to 1.
          +optional
        format: int32
        type: integer
      revisionHistoryLimit:
        description: |-
          The number of old ReplicaSets to retain to allow rollback.
          This is a pointer to distinguish between explicit zero and not specified.
          Defaults to 10.
          +optional
        format: int32
        type: integer
      selector:
        $ref: '#/definitions/LabelSelector'
      strategy:
        $ref: '#/definitions/DeploymentStrategy'
      template:
        $ref: '#/definitions/PodTemplateSpec'
    title: DeploymentSpec is the specification of the desired behavior of the Deployment.
    type: object
  DeploymentStatus:
    properties:
      availableReplicas:
        format: int32
        type: integer
      description:
        type: string
      explainerFor:
        type: string
      name:
        type: string
      replicas:
        format: int32
        type: integer
      status:
        type: string
    type: object
  DeploymentStrategy:
    properties:
      rollingUpdate:
        $ref: '#/definitions/RollingUpdateDeployment'
      type:
        $ref: '#/definitions/DeploymentStrategyType'
    title: DeploymentStrategy describes how to replace existing pods with new ones.
    type: object
  DeploymentStrategyType:
    type: string
  DetectorConfigData:
    properties:
      config:
        $ref: '#/definitions/DetectorConfiguration'
      name:
        type: string
    type: object
  DetectorConfiguration:
    properties:
      basic:
        $ref: '#/definitions/BasicDetectorConfiguration'
      deployment:
        $ref: '#/definitions/DetectorDeploymentConfiguration'
    type: object
  DetectorData:
    properties:
      config:
        $ref: '#/definitions/DetectorConfiguration'
      deployment_kind:
        type: string
      deployment_name:
        type: string
      detector_type:
        type: string
      name:
        type: string
      namespace:
        type: string
      status:
        $ref: '#/definitions/DetectorStatus'
    type: object
  DetectorDeploymentConfiguration:
    properties:
      event_source:
        type: string
      event_type:
        type: string
      http_port:
        type: string
      model_name:
        type: string
      prom_scraping:
        type: boolean
      protocol:
        type: string
      reply_url:
        type: string
      user_permission:
        format: int64
        type: integer
    type: object
  DetectorStatus:
    type: string
  DownwardAPIProjection:
    description: |-
      Note that this is identical to a downwardAPI volume source without the default
      mode.
    properties:
      items:
        description: |-
          Items is a list of DownwardAPIVolume file
          +optional
        items:
          $ref: '#/definitions/DownwardAPIVolumeFile'
        type: array
    title: Represents downward API info for projecting into a projected volume.
    type: object
  DownwardAPIVolumeFile:
    description: DownwardAPIVolumeFile represents information to create the file containing the pod field
    properties:
      fieldRef:
        $ref: '#/definitions/ObjectFieldSelector'
      mode:
        description: |-
          Optional: mode bits used to set permissions on this file, must be an octal value
          between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          If not specified, the volume defaultMode will be used.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        format: int32
        type: integer
      path:
        description: 'Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the ''..'' path. Must be utf-8 encoded. The first item of the relative path must not start with ''..'''
        type: string
      resourceFieldRef:
        $ref: '#/definitions/ResourceFieldSelector'
    type: object
  DownwardAPIVolumeSource:
    description: Downward API volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        description: |-
          Optional: mode bits to use on created files by default. Must be a
          Optional: mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        format: int32
        type: integer
      items:
        description: |-
          Items is a list of downward API volume file
          +optional
        items:
          $ref: '#/definitions/DownwardAPIVolumeFile'
        type: array
    title: DownwardAPIVolumeSource represents a volume containing downward API info.
    type: object
  EmptyDirVolumeSource:
    description: Empty directory volumes support ownership management and SELinux relabeling.
    properties:
      medium:
        $ref: '#/definitions/StorageMedium'
      sizeLimit:
        $ref: '#/definitions/Quantity'
    title: Represents an empty directory for a pod.
    type: object
  Endpoint:
    properties:
      grpcPort:
        format: int32
        type: integer
      httpPort:
        format: int32
        type: integer
      service_host:
        type: string
      service_port:
        format: int32
        type: integer
      type:
        $ref: '#/definitions/EndpointType'
    type: object
  EndpointType:
    type: string
  EnvFromSource:
    description: EnvFromSource represents the source of a set of ConfigMaps
    properties:
      configMapRef:
        $ref: '#/definitions/ConfigMapEnvSource'
      prefix:
        description: |-
          An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
          +optional
        type: string
      secretRef:
        $ref: '#/definitions/SecretEnvSource'
    type: object
  EnvVar:
    properties:
      name:
        description: Name of the environment variable. Must be a C_IDENTIFIER.
        type: string
      value:
        description: |-
          Variable references $(VAR_NAME) are expanded
          using the previous defined environment variables in the container and
          any service environment variables. If a variable cannot be resolved,
          the reference in the input string will be unchanged. The $(VAR_NAME)
          syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
          references will never be expanded, regardless of whether the variable
          exists or not.
          Defaults to "".
          +optional
        type: string
      valueFrom:
        $ref: '#/definitions/EnvVarSource'
    title: EnvVar represents an environment variable present in a Container.
    type: object
  EnvVarSource:
    properties:
      configMapKeyRef:
        $ref: '#/definitions/ConfigMapKeySelector'
      fieldRef:
        $ref: '#/definitions/ObjectFieldSelector'
      resourceFieldRef:
        $ref: '#/definitions/ResourceFieldSelector'
      secretKeyRef:
        $ref: '#/definitions/SecretKeySelector'
    title: EnvVarSource represents a source for the value of an EnvVar.
    type: object
  EphemeralContainer:
    description: |-
      An EphemeralContainer is a container that may be added temporarily to an existing pod for
      user-initiated activities such as debugging. Ephemeral containers have no resource or
      scheduling guarantees, and they will not be restarted when they exit or when a pod is
      removed or restarted. If an ephemeral container causes a pod to exceed its resource
      allocation, the pod may be evicted.
      Ephemeral containers may not be added by directly updating the pod spec. They must be added
      via the pod's ephemeralcontainers subresource, and they will appear in the pod spec
      once added.
      This is an alpha feature enabled by the EphemeralContainers feature flag.
    properties:
      args:
        description: |-
          Arguments to the entrypoint.
          The docker image's CMD is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax
          can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
          regardless of whether the variable exists or not.
          Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      command:
        description: |-
          Entrypoint array. Not executed within a shell.
          The docker image's ENTRYPOINT is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax
          can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
          regardless of whether the variable exists or not.
          Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      env:
        description: |-
          List of environment variables to set in the container.
          Cannot be updated.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/EnvVar'
        type: array
      envFrom:
        description: |-
          List of sources to populate environment variables in the container.
          The keys defined within a source must be a C_IDENTIFIER. All invalid keys
          will be reported as an event when the container is starting. When a key exists in multiple
          sources, the value associated with the last source will take precedence.
          Values defined by an Env with a duplicate key will take precedence.
          Cannot be updated.
          +optional
        items:
          $ref: '#/definitions/EnvFromSource'
        type: array
      image:
        description: |-
          Docker image name.
          More info: https://kubernetes.io/docs/concepts/containers/images
        type: string
      imagePullPolicy:
        $ref: '#/definitions/PullPolicy'
      lifecycle:
        $ref: '#/definitions/Lifecycle'
      livenessProbe:
        $ref: '#/definitions/Probe'
      name:
        description: |-
          Name of the ephemeral container specified as a DNS_LABEL.
          This name must be unique among all containers, init containers and ephemeral containers.
        type: string
      ports:
        description: Ports are not allowed for ephemeral containers.
        items:
          $ref: '#/definitions/ContainerPort'
        type: array
      readinessProbe:
        $ref: '#/definitions/Probe'
      resources:
        $ref: '#/definitions/ResourceRequirements'
      securityContext:
        $ref: '#/definitions/SecurityContext'
      startupProbe:
        $ref: '#/definitions/Probe'
      stdin:
        description: |-
          Whether this container should allocate a buffer for stdin in the container runtime. If this
          is not set, reads from stdin in the container will always result in EOF.
          Default is false.
          +optional
        type: boolean
      stdinOnce:
        description: |-
          Whether the container runtime should close the stdin channel after it has been opened by
          a single attach. When stdin is true the stdin stream will remain open across multiple attach
          sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
          first client attaches to stdin, and then remains open and accepts data until the client disconnects,
          at which time stdin is closed and remains closed until the container is restarted. If this
          flag is false, a container processes that reads from stdin will never receive an EOF.
          Default is false
          +optional
        type: boolean
      targetContainerName:
        description: |-
          If set, the name of the container from PodSpec that this ephemeral container targets.
          The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.
          If not set then the ephemeral container is run in whatever namespaces are shared
          for the pod. Note that the container runtime must support this feature.
          +optional
        type: string
      terminationMessagePath:
        description: |-
          Optional: Path at which the file to which the container's termination message
          will be written is mounted into the container's filesystem.
          Message written is intended to be brief final status, such as an assertion failure message.
          Will be truncated by the node if greater than 4096 bytes. The total message length across
          all containers will be limited to 12kb.
          Defaults to /dev/termination-log.
          Cannot be updated.
          +optional
        type: string
      terminationMessagePolicy:
        $ref: '#/definitions/TerminationMessagePolicy'
      tty:
        description: |-
          Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
          Default is false.
          +optional
        type: boolean
      volumeDevices:
        description: |-
          volumeDevices is the list of block devices to be used by the container.
          +patchMergeKey=devicePath
          +patchStrategy=merge
          +optional
        items:
          $ref: '#/definitions/VolumeDevice'
        type: array
      volumeMounts:
        description: |-
          Pod volumes to mount into the container's filesystem.
          Cannot be updated.
          +optional
          +patchMergeKey=mountPath
          +patchStrategy=merge
        items:
          $ref: '#/definitions/VolumeMount'
        type: array
      workingDir:
        description: |-
          Container's working directory.
          If not specified, the container runtime's default will be used, which
          might be configured in the container image.
          Cannot be updated.
          +optional
        type: string
    type: object
  EphemeralVolumeSource:
    properties:
      readOnly:
        description: |-
          Specifies a read-only configuration for the volume.
          Defaults to false (read/write).
          +optional
        type: boolean
      volumeClaimTemplate:
        $ref: '#/definitions/PersistentVolumeClaimTemplate'
    title: Represents an ephemeral volume that is handled by a normal storage driver.
    type: object
  Error:
    description: Error Error
    properties:
      code:
        description: Code
        format: int64
        type: integer
      message:
        description: Message
        type: string
      requestId:
        description: RequestId
        type: string
    type: object
  ExecAction:
    properties:
      command:
        description: |-
          Command is the command line to execute inside the container, the working directory for the
          command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
          not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
          a shell, you need to explicitly call out to that shell.
          Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          +optional
        items:
          type: string
        type: array
    title: ExecAction describes a "run in container" action.
    type: object
  Experiment:
    description: Experiment is the Schema for the experiments API
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: http://kubernetes.io/docs/user-guide/annotations
          +optional
        type: object
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      clusterName:
        description: |-
          The name of the cluster which the object belongs to.
          This is used to distinguish resources with same name and namespace in different clusters.
          This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
          +optional
        type: string
      creationTimestamp:
        $ref: '#/definitions/Time'
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        format: int64
        type: integer
      deletionTimestamp:
        $ref: '#/definitions/Time'
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
        items:
          type: string
        type: array
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will
          NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
          ServerTimeout indicating a unique name could not be found in the time allotted, and the client
          should retry (optionally after the time indicated in the Retry-After header).

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
        type: string
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        format: int64
        type: integer
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: http://kubernetes.io/docs/user-guide/labels
          +optional
        type: object
      managedFields:
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
        items:
          $ref: '#/definitions/ManagedFieldsEntry'
        type: array
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
          +optional
        type: string
      namespace:
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/namespaces
          +optional
        type: string
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
        items:
          $ref: '#/definitions/OwnerReference'
        type: array
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          SelfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
      spec:
        $ref: '#/definitions/ExperimentSpec'
      status:
        $ref: '#/definitions/ExperimentStatus'
      uid:
        $ref: '#/definitions/UID'
    type: object
  ExperimentCandidate:
    properties:
      name:
        type: string
      weight:
        format: uint32
        type: integer
    type: object
  ExperimentMirror:
    properties:
      name:
        type: string
      percent:
        format: uint32
        type: integer
    type: object
  ExperimentSpec:
    description: ExperimentSpec defines the desired state of Experiment
    properties:
      candidates:
        items:
          $ref: '#/definitions/ExperimentCandidate'
        type: array
      default:
        type: string
      mirror:
        $ref: '#/definitions/ExperimentMirror'
      resourceType:
        $ref: '#/definitions/ResourceType'
    type: object
  ExperimentStatus:
    description: ExperimentStatus defines the observed state of Experiment
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is additional Status fields for the Resource to save some
          additional State as well as convey more information to the user. This is
          roughly akin to Annotations on any k8s resource, just the reconciler conveying
          richer information outwards.
        type: object
      conditions:
        $ref: '#/definitions/Conditions'
      observedGeneration:
        description: |-
          ObservedGeneration is the 'Generation' of the Service that
          was last processed by the controller.
          +optional
        format: int64
        type: integer
    type: object
  Explainer:
    properties:
      config:
        additionalProperties:
          type: string
        type: object
      containerSpec:
        $ref: '#/definitions/Container'
      endpoint:
        $ref: '#/definitions/Endpoint'
      envSecretRefName:
        type: string
      initParameters:
        type: string
      modelUri:
        type: string
      replicas:
        format: int32
        type: integer
      serviceAccountName:
        type: string
      storageInitializerImage:
        type: string
      type:
        $ref: '#/definitions/AlibiExplainerType'
    type: object
  ExplainerSpec:
    description: Either ModelRef or PipelineRef is required
    properties:
      modelRef:
        description: |-
          one of the following need to be set for blackbox explainers
          Reference to Model
          +optional
        type: string
      pipelineRef:
        description: |-
          Reference to Pipeline
          +optional
        type: string
      type:
        description: type of explainer
        type: string
    type: object
  ExternalMetricSource:
    description: |-
      ExternalMetricSource indicates how to scale on a metric not associated with
      any Kubernetes object (for example length of queue in cloud
      messaging service, or QPS from loadbalancer running outside of cluster).
      Exactly one "target" type should be set.
    properties:
      metricName:
        description: metricName is the name of the metric in question.
        type: string
      metricSelector:
        $ref: '#/definitions/LabelSelector'
      targetAverageValue:
        $ref: '#/definitions/Quantity'
      targetValue:
        $ref: '#/definitions/Quantity'
    type: object
  FCVolumeSource:
    description: |-
      Fibre Channel volumes can only be mounted as read/write once.
      Fibre Channel volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      lun:
        description: |-
          Optional: FC target lun number
          +optional
        format: int32
        type: integer
      readOnly:
        description: |-
          Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      targetWWNs:
        description: |-
          Optional: FC target worldwide names (WWNs)
          +optional
        items:
          type: string
        type: array
      wwids:
        description: |-
          Optional: FC volume world wide identifiers (wwids)
          Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
          +optional
        items:
          type: string
        type: array
    title: Represents a Fibre Channel volume.
    type: object
  Fallback:
    description: Fallback is the spec for fallback options
    properties:
      failureThreshold:
        format: int32
        type: integer
      replicas:
        format: int32
        type: integer
    type: object
  FeatureDistribution:
    description: FeatureDistribution represents feature level distribution
    properties:
      buckets:
        description: Buckets in a feature distribution
        items:
          $ref: '#/definitions/FeatureDistributionBucket'
        type: array
    type: object
  FeatureDistributionBucket:
    description: FeatureDistribution represents feature level distribution bucket
    properties:
      count:
        description: Bucket Count in a feature distribution
        format: double
        type: number
      distribution:
        $ref: '#/definitions/FeatureDistribution'
      key:
        description: Bucket Key in a feature distribution
        type: string
    type: object
  FeatureDistributionParameters:
    description: FeatureDistributionParameters represents user defined feature distribution parameters
    properties:
      histogram_interval:
        description: HistogramInterval refers to the size of bins in a aggregated feature distribution or statistics queries for real features
        format: double
        type: number
      minimum_bucket_count:
        description: MinimumBucketCount refers to the minimum bucket size to filter in case of categorical, proba or one_hot feature queries
        format: int64
        type: integer
      number_of_time_buckets:
        description: NumberOfTimeBuckets refers to the number of time bins in a non time-aggregated feature distribution or statistics queries
        format: int64
        type: integer
    type: object
  FeatureDistributionResponse:
    description: FeatureDistributionResponse represents a feature distribution response
    properties:
      distribution:
        $ref: '#/definitions/FeatureDistribution'
      feature:
        description: FeatureName refers to the name of feature as per the model predictions schema
        type: string
      interaction:
        $ref: '#/definitions/FeatureInteraction'
      total_instances:
        description: TotalInstances represents the total prediction over which the distribution is computed
        format: int64
        type: integer
      type:
        description: FeatureType refers to the type of feature as per the model predictions schema
        type: string
    type: object
  FeatureFilter:
    description: FeatureFilter represents a feature distribution filter
    properties:
      category_name:
        description: CategoryName refers to name of the feature category relevant to PROBA and ONE_HOT features
        type: string
      feature:
        description: FeatureName refers to the name of feature as per the model predictions schema
        type: string
      gt:
        description: GreaterThan refers to numerical value of the feature filter relevant for timestamps or REAL features
        type: string
      gte:
        description: GreaterThanOrEqual refers to numerical value of the feature filter relevant for timestamps or REAL features
        type: string
      interaction:
        $ref: '#/definitions/FeatureInteraction'
      is_outlier:
        description: IsOutlier refers to boolean for outlier filters
        type: boolean
      is_timestamp:
        description: IsTimestamp refers to boolean for timestamp filters
        type: boolean
      lt:
        description: LessThan refers to numerical value of the feature filter relevant for timestamps or REAL features
        type: string
      lte:
        description: LessThanOrEqual refers to numerical value of the feature filter relevant for timestamps or REAL features
        type: string
      terms:
        description: Terms refers to set of feature categories to filter relevant to CATEGORICAL features
        items:
          type: string
        type: array
    type: object
  FeatureInteraction:
    description: Feature Prediction Interaction
    type: string
  FeatureStatisticsResponse:
    description: FeatureStatisticsResponse represents a feature statistics response
    properties:
      feature:
        description: FeatureName refers to the name of feature as per the model predictions schema
        type: string
      interaction:
        $ref: '#/definitions/FeatureInteraction'
      stats:
        $ref: '#/definitions/FeatureStats'
      total_instances:
        description: TotalInstances represents the total prediction over which the distribution is computed
        format: int64
        type: integer
      type:
        description: FeatureType refers to the type of feature as per the model predictions schema
        type: string
    type: object
  FeatureStats:
    description: FeatureStats represents feature level statistics
    properties:
      avg:
        description: Statistical Average of a feature value (relevant to REAL features)
        format: double
        type: number
      buckets:
        description: Buckets in a feature statistics
        items:
          $ref: '#/definitions/FeatureStatsBucket'
        type: array
      count:
        description: Statistical Count of a feature value (relevant to REAL features)
        format: int64
        type: integer
      max:
        description: Statistical Maximum of a feature value (relevant to REAL features)
        format: double
        type: number
      min:
        description: Statistical Minimum of a feature value (relevant to REAL features)
        format: double
        type: number
      most_frequent_category:
        description: Statistical Most Frequent Category Name of a feature value (relevant to CATEGORICAL, PROBA and ONE_HOT features)
        type: string
      most_frequent_category_count:
        description: Statistical Most Frequent Category Count of a feature value (relevant to CATEGORICAL, PROBA and ONE_HOT features)
        format: double
        type: number
    type: object
  FeatureStatsBucket:
    description: FeatureDistribution represents feature level statistics bucket
    properties:
      key:
        description: Bucket Key in a feature statistics
        type: string
      stats:
        $ref: '#/definitions/FeatureStats'
    type: object
  FieldsV1:
    description: |-
      Each key is either a '.' representing the field itself, and will always map to an empty set,
      or a string representing a sub-field or item. The string will follow one of these four formats:
      'f:<name>', where <name> is the name of a field in a struct, or key in a map
      'v:<value>', where <value> is the exact json formatted value of a list item
      'i:<index>', where <index> is position of a item in a list
      'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values
      If a key maps to an empty Fields value, the field that key represents is part of the set.

      The exact format is defined in sigs.k8s.io/structured-merge-diff
      +protobuf.options.(gogoproto.goproto_stringer)=false
    title: FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.
    type: object
  FileDiff:
    description: |-
      note diff is html that needs to be unicode decoded/unescaped
      from and to are raw values
      GitHubUrl is a github compare url
    properties:
      ChangeType:
        type: string
      CommitHash:
        type: string
      Diff:
        type: string
      FileName:
        type: string
      From:
        type: string
      GitHubUrl:
        type: string
      PrevCommitHash:
        type: string
      To:
        type: string
    type: object
  FinalizerName:
    title: FinalizerName is the name identifying a finalizer during namespace lifecycle.
    type: string
  FlexVolumeSource:
    description: |-
      FlexVolume represents a generic volume resource that is
      provisioned/attached using an exec based plugin.
    properties:
      driver:
        description: Driver is the name of the driver to use for this volume.
        type: string
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
          +optional
        type: string
      options:
        additionalProperties:
          type: string
        description: |-
          Optional: Extra command options if any.
          +optional
        type: object
      readOnly:
        description: |-
          Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
    type: object
  FlockerVolumeSource:
    description: |-
      One and only one of datasetName and datasetUUID should be set.
      Flocker volumes do not support ownership management or SELinux relabeling.
    properties:
      datasetName:
        description: |-
          Name of the dataset stored as metadata -> name on the dataset for Flocker
          should be considered as deprecated
          +optional
        type: string
      datasetUUID:
        description: |-
          UUID of the dataset. This is unique identifier of a Flocker dataset
          +optional
        type: string
    title: Represents a Flocker volume mounted by the Flocker agent.
    type: object
  GCEPersistentDiskVolumeSource:
    description: |-
      A GCE PD must exist before mounting to a container. The disk must
      also be in the same GCE project and zone as the kubelet. A GCE PD
      can only be mounted as read/write once or read-only many times. GCE
      PDs support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: |-
          Filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      partition:
        description: |-
          The partition in the volume that you want to mount.
          If omitted, the default is to mount by volume name.
          Examples: For volume /dev/sda1, you specify the partition as "1".
          Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          +optional
        format: int32
        type: integer
      pdName:
        description: |-
          Unique name of the PD resource in GCE. Used to identify the disk in GCE.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        type: string
      readOnly:
        description: |-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          +optional
        type: boolean
    title: Represents a Persistent Disk resource in Google Compute Engine.
    type: object
  GitRepoVolumeSource:
    description: |-
      DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an
      EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
      into the Pod's container.
    properties:
      directory:
        description: |-
          Target directory name.
          Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
          git repository.  Otherwise, if specified, the volume will contain the git repository in
          the subdirectory with the given name.
          +optional
        type: string
      repository:
        description: Repository URL
        type: string
      revision:
        description: |-
          Commit hash for the specified revision.
          +optional
        type: string
    title: |-
      Represents a volume that is populated with the contents of a git repository.
      Git repo volumes do not support ownership management.
      Git repo volumes support SELinux relabeling.
    type: object
  GlusterfsVolumeSource:
    description: Glusterfs volumes do not support ownership management or SELinux relabeling.
    properties:
      endpoints:
        description: |-
          EndpointsName is the endpoint name that details Glusterfs topology.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        type: string
      path:
        description: |-
          Path is the Glusterfs volume path.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        type: string
      readOnly:
        description: |-
          ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions.
          Defaults to false.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
          +optional
        type: boolean
    title: Represents a Glusterfs mount that lasts the lifetime of a pod.
    type: object
  HPAScalingPolicy:
    properties:
      periodSeconds:
        description: |-
          PeriodSeconds specifies the window of time for which the policy should hold true.
          PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
        format: int32
        type: integer
      type:
        $ref: '#/definitions/HPAScalingPolicyType'
      value:
        description: |-
          Value contains the amount of change which is permitted by the policy.
          It must be greater than zero
        format: int32
        type: integer
    title: HPAScalingPolicy is a single policy which must hold true for a specified past interval.
    type: object
  HPAScalingPolicyType:
    title: HPAScalingPolicyType is the type of the policy which could be used while making scaling decisions.
    type: string
  HPAScalingRules:
    description: |-
      These Rules are applied after calculating DesiredReplicas from metrics for the HPA.
      They can limit the scaling velocity by specifying scaling policies.
      They can prevent flapping by specifying the stabilization window, so that the
      number of replicas is not set instantly, instead, the safest value from the stabilization
      window is chosen.
    properties:
      policies:
        description: |-
          policies is a list of potential scaling polices which can be used during scaling.
          At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid
          +optional
        items:
          $ref: '#/definitions/HPAScalingPolicy'
        type: array
      selectPolicy:
        $ref: '#/definitions/ScalingPolicySelect'
      stabilizationWindowSeconds:
        description: |-
          StabilizationWindowSeconds is the number of seconds for which past recommendations should be
          considered while scaling up or scaling down.
          StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).
          If not set, use the default values:
          For scale up: 0 (i.e. no stabilization is done).
          For scale down: 300 (i.e. the stabilization window is 300 seconds long).
          +optional
        format: int32
        type: integer
    title: HPAScalingRules configures the scaling behavior for one direction.
    type: object
  HTTPGetAction:
    properties:
      host:
        description: |-
          Host name to connect to, defaults to the pod IP. You probably want to set
          "Host" in httpHeaders instead.
          +optional
        type: string
      httpHeaders:
        description: |-
          Custom headers to set in the request. HTTP allows repeated headers.
          +optional
        items:
          $ref: '#/definitions/HTTPHeader'
        type: array
      path:
        description: |-
          Path to access on the HTTP server.
          +optional
        type: string
      port:
        $ref: '#/definitions/IntOrString'
      scheme:
        $ref: '#/definitions/URIScheme'
    title: HTTPGetAction describes an action based on HTTP Get requests.
    type: object
  HTTPHeader:
    description: HTTPHeader describes a custom header to be used in HTTP probes
    properties:
      name:
        description: The header field name
        type: string
      value:
        description: The header field value
        type: string
    type: object
  Handler:
    description: |-
      Handler defines a specific action that should be taken
      TODO: pass structured data to these actions, and document that data here.
    properties:
      exec:
        $ref: '#/definitions/ExecAction'
      httpGet:
        $ref: '#/definitions/HTTPGetAction'
      tcpSocket:
        $ref: '#/definitions/TCPSocketAction'
    type: object
  HealthCheckInfo:
    description: for checking health of dependencies
    properties:
      Elastic:
        type: string
      Prometheus:
        type: string
    type: object
  HorizontalPodAutoscalerBehavior:
    description: |-
      HorizontalPodAutoscalerBehavior configures the scaling behavior of the target
      in both Up and Down directions (scaleUp and scaleDown fields respectively).
    properties:
      scaleDown:
        $ref: '#/definitions/HPAScalingRules'
      scaleUp:
        $ref: '#/definitions/HPAScalingRules'
    type: object
  HorizontalPodAutoscalerConfig:
    description: HorizontalPodAutoscalerConfig specifies horizontal scale config
    properties:
      behavior:
        $ref: '#/definitions/HorizontalPodAutoscalerBehavior'
    type: object
  HostAlias:
    description: |-
      HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
      pod's hosts file.
    properties:
      hostnames:
        description: Hostnames for the above IP address.
        items:
          type: string
        type: array
      ip:
        description: IP address of the host file entry.
        type: string
    type: object
  HostPathType:
    type: string
  HostPathVolumeSource:
    description: Host path volumes do not support ownership management or SELinux relabeling.
    properties:
      path:
        description: |-
          Path of the directory on the host.
          If the path is a symlink, it will follow the link to the real path.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        type: string
      type:
        $ref: '#/definitions/HostPathType'
    title: Represents a host path mapped into a pod.
    type: object
  IPFamily:
    description: |-
      IPFamily represents the IP Family (IPv4 or IPv6). This type is used
      to express the family of an IP expressed by a type (i.e. service.Spec.IPFamily)
    type: string
  ISCSIVolumeSource:
    description: |-
      ISCSI volumes can only be mounted as read/write once.
      ISCSI volumes support ownership management and SELinux relabeling.
    properties:
      chapAuthDiscovery:
        description: |-
          whether support iSCSI Discovery CHAP authentication
          +optional
        type: boolean
      chapAuthSession:
        description: |-
          whether support iSCSI Session CHAP authentication
          +optional
        type: boolean
      fsType:
        description: |-
          Filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      initiatorName:
        description: |-
          Custom iSCSI Initiator Name.
          If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
          <target portal>:<volume name> will be created for the connection.
          +optional
        type: string
      iqn:
        description: Target iSCSI Qualified Name.
        type: string
      iscsiInterface:
        description: |-
          iSCSI Interface Name that uses an iSCSI transport.
          Defaults to 'default' (tcp).
          +optional
        type: string
      lun:
        description: iSCSI Target Lun number.
        format: int32
        type: integer
      portals:
        description: |-
          iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
          is other than default (typically TCP ports 860 and 3260).
          +optional
        items:
          type: string
        type: array
      readOnly:
        description: |-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          +optional
        type: boolean
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
      targetPortal:
        description: |-
          iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
          is other than default (typically TCP ports 860 and 3260).
        type: string
    title: Represents an ISCSI disk.
    type: object
  IntOrString:
    description: |-
      +protobuf=true
      +protobuf.options.(gogoproto.goproto_stringer)=false
      +k8s:openapi-gen=true
    properties:
      IntVal:
        format: int32
        type: integer
      StrVal:
        type: string
      Type:
        $ref: '#/definitions/Type'
    title: |-
      IntOrString is a type that can hold an int32 or a string.  When used in
      JSON or YAML marshalling and unmarshalling, it produces or consumes the
      inner type.  This allows you to have, for example, a JSON field that can
      accept a name or number.
      TODO: Rename to Int32OrString
    type: object
  JoinType:
    type: string
  KeyToPath:
    properties:
      key:
        description: The key to project.
        type: string
      mode:
        description: |-
          Optional: mode bits used to set permissions on this file.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          If not specified, the volume defaultMode will be used.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        format: int32
        type: integer
      path:
        description: |-
          The relative path of the file to map the key to.
          May not be an absolute path.
          May not contain the path element '..'.
          May not start with the string '..'.
        type: string
    title: Maps a string key to a path within a volume.
    type: object
  LabelSelector:
    description: |-
      A label selector is a label query over a set of resources. The result of matchLabels and
      matchExpressions are ANDed. An empty label selector matches all objects. A null
      label selector matches no objects.
    properties:
      matchExpressions:
        description: |-
          matchExpressions is a list of label selector requirements. The requirements are ANDed.
          +optional
        items:
          $ref: '#/definitions/LabelSelectorRequirement'
        type: array
      matchLabels:
        additionalProperties:
          type: string
        description: |-
          matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
          map is equivalent to an element of matchExpressions, whose key field is "key", the
          operator is "In", and the values array contains only "value". The requirements are ANDed.
          +optional
        type: object
    type: object
  LabelSelectorOperator:
    title: A label selector operator is the set of operators that can be used in a selector requirement.
    type: string
  LabelSelectorRequirement:
    description: |-
      A label selector requirement is a selector that contains values, a key, and an operator that
      relates the key and values.
    properties:
      key:
        description: |-
          key is the label key that the selector applies to.
          +patchMergeKey=key
          +patchStrategy=merge
        type: string
      operator:
        $ref: '#/definitions/LabelSelectorOperator'
      values:
        description: |-
          values is an array of string values. If the operator is In or NotIn,
          the values array must be non-empty. If the operator is Exists or DoesNotExist,
          the values array must be empty. This array is replaced during a strategic
          merge patch.
          +optional
        items:
          type: string
        type: array
    type: object
  Lifecycle:
    description: |-
      Lifecycle describes actions that the management system should take in response to container lifecycle
      events. For the PostStart and PreStop lifecycle handlers, management of the container blocks
      until the action is complete, unless the container process fails, in which case the handler is aborted.
    properties:
      postStart:
        $ref: '#/definitions/Handler'
      preStop:
        $ref: '#/definitions/Handler'
    type: object
  ListMeta:
    description: |-
      ListMeta describes metadata that synthetic resources must have, including lists and
      various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
    properties:
      continue:
        description: |-
          continue may be set if the user set a limit on the number of items returned, and indicates that
          the server has more data available. The value is opaque and may be used to issue another request
          to the endpoint that served this list to retrieve the next set of available objects. Continuing a
          consistent list may not be possible if the server configuration has changed or more than a few
          minutes have passed. The resourceVersion field returned when using this continue value will be
          identical to the value in the first response, unless you have received this token from an error
          message.
        type: string
      remainingItemCount:
        description: |-
          remainingItemCount is the number of subsequent items in the list which are not included in this
          list response. If the list request contained label or field selectors, then the number of
          remaining items is unknown and the field will be left unset and omitted during serialization.
          If the list is complete (either because it is not chunking or because this is the last chunk),
          then there are no more remaining items and this field will be left unset and omitted during
          serialization.
          Servers older than v1.15 do not set this field.
          The intended use of the remainingItemCount is *estimating* the size of a collection. Clients
          should not rely on the remainingItemCount to be set or to be exact.
          +optional
        format: int64
        type: integer
      resourceVersion:
        description: |-
          String that identifies the server's internal version of this object that
          can be used by clients to determine when objects have changed.
          Value must be treated as opaque by clients and passed unmodified back to the server.
          Populated by the system.
          Read-only.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          selfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
    type: object
  LocalObjectReference:
    description: |-
      LocalObjectReference contains enough information to let you locate the
      referenced object inside the same namespace.
    properties:
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
    type: object
  Logger:
    description: |-
      Logger provides optional payload logging for all endpoints
      +experimental
    properties:
      mode:
        $ref: '#/definitions/LoggerMode'
      url:
        description: |-
          URL to send request logging CloudEvents
          +optional
        type: string
    type: object
  LoggerMode:
    type: string
  LoggingSpec:
    properties:
      percent:
        description: Percentage of payloads to log
        format: uint64
        type: integer
    type: object
  ManagedFieldsEntry:
    description: |-
      ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource
      that the fieldset applies to.
    properties:
      apiVersion:
        description: |-
          APIVersion defines the version of this resource that this field set
          applies to. The format is "group/version" just like the top-level
          APIVersion field. It is necessary to track the version of a field
          set because it cannot be automatically converted.
        type: string
      fieldsType:
        description: |-
          FieldsType is the discriminator for the different fields format and version.
          There is currently only one possible value: "FieldsV1"
        type: string
      fieldsV1:
        $ref: '#/definitions/FieldsV1'
      manager:
        description: Manager is an identifier of the workflow managing these fields.
        type: string
      operation:
        $ref: '#/definitions/ManagedFieldsOperationType'
      time:
        $ref: '#/definitions/Time'
    type: object
  ManagedFieldsOperationType:
    title: ManagedFieldsOperationType is the type of operation which lead to a ManagedFieldsEntry being created.
    type: string
  Message:
    description: Message Message
    properties:
      code:
        description: Code
        format: int64
        type: integer
      message:
        description: Message
        type: string
    type: object
  MetricSourceType:
    title: MetricSourceType indicates the type of metric.
    type: string
  MetricSpec:
    description: |-
      MetricSpec specifies how to scale based on a single metric
      (only `type` and one other matching field should be set at once).
    properties:
      external:
        $ref: '#/definitions/ExternalMetricSource'
      object:
        $ref: '#/definitions/ObjectMetricSource'
      pods:
        $ref: '#/definitions/PodsMetricSource'
      resource:
        $ref: '#/definitions/ResourceMetricSource'
      type:
        $ref: '#/definitions/MetricSourceType'
    type: object
  MetricTargetType:
    description: |-
      MetricTargetType specifies the type of metric being targeted, and should be either
      "Value", "AverageValue", or "Utilization"
    type: string
  Model:
    description: Model is the Schema for the models API
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: http://kubernetes.io/docs/user-guide/annotations
          +optional
        type: object
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      clusterName:
        description: |-
          The name of the cluster which the object belongs to.
          This is used to distinguish resources with same name and namespace in different clusters.
          This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
          +optional
        type: string
      creationTimestamp:
        $ref: '#/definitions/Time'
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        format: int64
        type: integer
      deletionTimestamp:
        $ref: '#/definitions/Time'
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
        items:
          type: string
        type: array
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will
          NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
          ServerTimeout indicating a unique name could not be found in the time allotted, and the client
          should retry (optionally after the time indicated in the Retry-After header).

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
        type: string
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        format: int64
        type: integer
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: http://kubernetes.io/docs/user-guide/labels
          +optional
        type: object
      managedFields:
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
        items:
          $ref: '#/definitions/ManagedFieldsEntry'
        type: array
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
          +optional
        type: string
      namespace:
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/namespaces
          +optional
        type: string
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
        items:
          $ref: '#/definitions/OwnerReference'
        type: array
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          SelfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
      spec:
        $ref: '#/definitions/ModelSpec'
      status:
        $ref: '#/definitions/ModelStatus'
      uid:
        $ref: '#/definitions/UID'
    type: object
  ModelSpec:
    description: ModelSpec defines the desired state of Model
    properties:
      artifactVersion:
        description: |-
          Artifact Version
          A v2 version folder to select from storage bucket
          +optional
        format: uint32
        type: integer
      dedicated:
        description: |-
          Dedicated server exclusive to this model
          Default false
        type: boolean
      explainer:
        $ref: '#/definitions/ExplainerSpec'
      logger:
        $ref: '#/definitions/LoggingSpec'
      maxReplicas:
        description: Max number of replicas - default equal to replicas
        format: int32
        type: integer
      memory:
        $ref: '#/definitions/Quantity'
      minReplicas:
        description: Min number of replicas - default equal to replicas
        format: int32
        type: integer
      modelType:
        description: |-
          Model type
          +optional
        type: string
      parameters:
        description: Parameters to load with model
        items:
          $ref: '#/definitions/ParameterSpec'
        type: array
      preloaded:
        description: |-
          Model already loaded on a server. Don't schedule.
          Default false
        type: boolean
      replicas:
        description: Number of replicas - default 1
        format: int32
        type: integer
      requirements:
        description: List of extra requirements for this model to be loaded on a compatible server
        items:
          type: string
        type: array
      schemaUri:
        description: |-
          Schema URI
          +optional
        type: string
      secretName:
        description: |-
          Secret name
          +optional
        type: string
      server:
        description: |-
          Name of the Server to deploy this artifact
          +optional
        type: string
      storageUri:
        description: Storage URI for the model repository
        type: string
    type: object
  ModelStatus:
    description: ModelStatus defines the observed state of Model
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is additional Status fields for the Resource to save some
          additional State as well as convey more information to the user. This is
          roughly akin to Annotations on any k8s resource, just the reconciler conveying
          richer information outwards.
        type: object
      conditions:
        $ref: '#/definitions/Conditions'
      observedGeneration:
        description: |-
          ObservedGeneration is the 'Generation' of the Service that
          was last processed by the controller.
          +optional
        format: int64
        type: integer
      replicas:
        description: Total number of replicas targeted by this model
        format: int32
        type: integer
    type: object
  MonitorInputData:
    description: |-
      MonitorInputData represents sent in payload of monitor request
      also passed into template to create query
    properties:
      DeploymentName:
        type: string
      DeploymentType:
        type: string
      End:
        type: string
      GroupBy:
        type: string
      ModelImage:
        type: string
      ModelName:
        type: string
      ModelVersion:
        type: string
      Namespace:
        type: string
      Offset:
        type: string
      Percentile:
        type: string
      PredictorName:
        type: string
      QueryTemplate:
        type: string
      Range:
        type: string
      Start:
        type: string
      Step:
        type: string
    type: object
  MountPropagationMode:
    title: MountPropagationMode describes mount propagation.
    type: string
  NFSVolumeSource:
    description: NFS volumes do not support ownership management or SELinux relabeling.
    properties:
      path:
        description: |-
          Path that is exported by the NFS server.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        type: string
      readOnly:
        description: |-
          ReadOnly here will force
          the NFS export to be mounted with read-only permissions.
          Defaults to false.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
          +optional
        type: boolean
      server:
        description: |-
          Server is the hostname or IP address of the NFS server.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        type: string
    title: Represents an NFS mount that lasts the lifetime of a pod.
    type: object
  Namespace:
    description: Use of multiple namespaces is optional.
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: http://kubernetes.io/docs/user-guide/annotations
          +optional
        type: object
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      clusterName:
        description: |-
          The name of the cluster which the object belongs to.
          This is used to distinguish resources with same name and namespace in different clusters.
          This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
          +optional
        type: string
      creationTimestamp:
        $ref: '#/definitions/Time'
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        format: int64
        type: integer
      deletionTimestamp:
        $ref: '#/definitions/Time'
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
        items:
          type: string
        type: array
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will
          NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
          ServerTimeout indicating a unique name could not be found in the time allotted, and the client
          should retry (optionally after the time indicated in the Retry-After header).

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
        type: string
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        format: int64
        type: integer
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: http://kubernetes.io/docs/user-guide/labels
          +optional
        type: object
      managedFields:
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
        items:
          $ref: '#/definitions/ManagedFieldsEntry'
        type: array
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
          +optional
        type: string
      namespace:
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/namespaces
          +optional
        type: string
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
        items:
          $ref: '#/definitions/OwnerReference'
        type: array
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          SelfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
      spec:
        $ref: '#/definitions/NamespaceSpec'
      status:
        $ref: '#/definitions/NamespaceStatus'
      uid:
        $ref: '#/definitions/UID'
    title: Namespace provides a scope for Names.
    type: object
  NamespaceCondition:
    properties:
      lastTransitionTime:
        $ref: '#/definitions/Time'
      message:
        description: +optional
        type: string
      reason:
        description: +optional
        type: string
      status:
        $ref: '#/definitions/ConditionStatus'
      type:
        $ref: '#/definitions/NamespaceConditionType'
    title: NamespaceCondition contains details about state of namespace.
    type: object
  NamespaceConditionType:
    type: string
  NamespacePhase:
    type: string
  NamespaceSpec:
    properties:
      finalizers:
        description: |-
          Finalizers is an opaque list of values that must be empty to permanently remove object from storage.
          More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
          +optional
        items:
          $ref: '#/definitions/FinalizerName'
        type: array
    title: NamespaceSpec describes the attributes on a Namespace.
    type: object
  NamespaceStatus:
    properties:
      conditions:
        description: |-
          Represents the latest available observations of a namespace's current state.
          +optional
          +patchMergeKey=type
          +patchStrategy=merge
        items:
          $ref: '#/definitions/NamespaceCondition'
        type: array
      phase:
        $ref: '#/definitions/NamespacePhase'
    title: NamespaceStatus is information about the current status of a Namespace.
    type: object
  NodeAffinity:
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node matches the corresponding matchExpressions; the
          node(s) with the highest sum are the most preferred.
          +optional
        items:
          $ref: '#/definitions/PreferredSchedulingTerm'
        type: array
      requiredDuringSchedulingIgnoredDuringExecution:
        $ref: '#/definitions/NodeSelector'
    title: Node affinity is a group of node affinity scheduling rules.
    type: object
  NodePhase:
    title: NodePhase is a label for the condition of a node at the current time.
    type: string
  NodeSelector:
    description: |-
      A node selector represents the union of the results of one or more label queries
      over a set of nodes; that is, it represents the OR of the selectors represented
      by the node selector terms.
    properties:
      nodeSelectorTerms:
        description: Required. A list of node selector terms. The terms are ORed.
        items:
          $ref: '#/definitions/NodeSelectorTerm'
        type: array
    type: object
  NodeSelectorOperator:
    description: |-
      A node selector operator is the set of operators that can be used in
      a node selector requirement.
    type: string
  NodeSelectorRequirement:
    description: |-
      A node selector requirement is a selector that contains values, a key, and an operator
      that relates the key and values.
    properties:
      key:
        description: The label key that the selector applies to.
        type: string
      operator:
        $ref: '#/definitions/NodeSelectorOperator'
      values:
        description: |-
          An array of string values. If the operator is In or NotIn,
          the values array must be non-empty. If the operator is Exists or DoesNotExist,
          the values array must be empty. If the operator is Gt or Lt, the values
          array must have a single element, which will be interpreted as an integer.
          This array is replaced during a strategic merge patch.
          +optional
        items:
          type: string
        type: array
    type: object
  NodeSelectorTerm:
    description: |-
      A null or empty node selector term matches no objects. The requirements of
      them are ANDed.
      The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
    properties:
      matchExpressions:
        description: |-
          A list of node selector requirements by node's labels.
          +optional
        items:
          $ref: '#/definitions/NodeSelectorRequirement'
        type: array
      matchFields:
        description: |-
          A list of node selector requirements by node's fields.
          +optional
        items:
          $ref: '#/definitions/NodeSelectorRequirement'
        type: array
    type: object
  ObjectFieldSelector:
    properties:
      apiVersion:
        description: |-
          Version of the schema the FieldPath is written in terms of, defaults to "v1".
          +optional
        type: string
      fieldPath:
        description: Path of the field to select in the specified API version.
        type: string
    title: ObjectFieldSelector selects an APIVersioned field of an object.
    type: object
  ObjectMeta:
    description: |-
      ObjectMeta is metadata that all persisted resources must have, which includes all objects
      users must create.
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: http://kubernetes.io/docs/user-guide/annotations
          +optional
        type: object
      clusterName:
        description: |-
          The name of the cluster which the object belongs to.
          This is used to distinguish resources with same name and namespace in different clusters.
          This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
          +optional
        type: string
      creationTimestamp:
        $ref: '#/definitions/Time'
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        format: int64
        type: integer
      deletionTimestamp:
        $ref: '#/definitions/Time'
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
        items:
          type: string
        type: array
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will
          NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
          ServerTimeout indicating a unique name could not be found in the time allotted, and the client
          should retry (optionally after the time indicated in the Retry-After header).

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
        type: string
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        format: int64
        type: integer
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: http://kubernetes.io/docs/user-guide/labels
          +optional
        type: object
      managedFields:
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
        items:
          $ref: '#/definitions/ManagedFieldsEntry'
        type: array
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
          +optional
        type: string
      namespace:
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/namespaces
          +optional
        type: string
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
        items:
          $ref: '#/definitions/OwnerReference'
        type: array
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          SelfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
      uid:
        $ref: '#/definitions/UID'
    type: object
  ObjectMetricSource:
    description: |-
      ObjectMetricSource indicates how to scale on a metric describing a
      kubernetes object (for example, hits-per-second on an Ingress object).
    properties:
      averageValue:
        $ref: '#/definitions/Quantity'
      metricName:
        description: metricName is the name of the metric in question.
        type: string
      selector:
        $ref: '#/definitions/LabelSelector'
      target:
        $ref: '#/definitions/CrossVersionObjectReference'
      targetValue:
        $ref: '#/definitions/Quantity'
    type: object
  OwnerReference:
    description: |-
      OwnerReference contains enough information to let you identify an owning
      object. An owning object must be in the same namespace as the dependent, or
      be cluster-scoped, so there is no namespace field.
    properties:
      apiVersion:
        description: API version of the referent.
        type: string
      blockOwnerDeletion:
        description: |-
          If true, AND if the owner has the "foregroundDeletion" finalizer, then
          the owner cannot be deleted from the key-value store until this
          reference is removed.
          Defaults to false.
          To set this field, a user needs "delete" permission of the owner,
          otherwise 422 (Unprocessable Entity) will be returned.
          +optional
        type: boolean
      controller:
        description: |-
          If true, this reference points to the managing controller.
          +optional
        type: boolean
      kind:
        description: |-
          Kind of the referent.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
      name:
        description: |-
          Name of the referent.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
        type: string
      uid:
        $ref: '#/definitions/UID'
    type: object
  Parameter:
    properties:
      name:
        type: string
      type:
        $ref: '#/definitions/ParmeterType'
      value:
        type: string
    type: object
  ParameterSpec:
    properties:
      name:
        type: string
      value:
        type: string
    type: object
  ParmeterType:
    type: string
  PersistentVolumeAccessMode:
    type: string
  PersistentVolumeClaimSpec:
    description: |-
      PersistentVolumeClaimSpec describes the common attributes of storage devices
      and allows a Source for provider-specific attributes
    properties:
      accessModes:
        description: |-
          AccessModes contains the desired access modes the volume should have.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
          +optional
        items:
          $ref: '#/definitions/PersistentVolumeAccessMode'
        type: array
      dataSource:
        $ref: '#/definitions/TypedLocalObjectReference'
      resources:
        $ref: '#/definitions/ResourceRequirements'
      selector:
        $ref: '#/definitions/LabelSelector'
      storageClassName:
        description: |-
          Name of the StorageClass required by the claim.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
          +optional
        type: string
      volumeMode:
        $ref: '#/definitions/PersistentVolumeMode'
      volumeName:
        description: |-
          VolumeName is the binding reference to the PersistentVolume backing this claim.
          +optional
        type: string
    type: object
  PersistentVolumeClaimTemplate:
    description: |-
      PersistentVolumeClaimTemplate is used to produce
      PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: http://kubernetes.io/docs/user-guide/annotations
          +optional
        type: object
      clusterName:
        description: |-
          The name of the cluster which the object belongs to.
          This is used to distinguish resources with same name and namespace in different clusters.
          This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
          +optional
        type: string
      creationTimestamp:
        $ref: '#/definitions/Time'
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        format: int64
        type: integer
      deletionTimestamp:
        $ref: '#/definitions/Time'
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
        items:
          type: string
        type: array
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will
          NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
          ServerTimeout indicating a unique name could not be found in the time allotted, and the client
          should retry (optionally after the time indicated in the Retry-After header).

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
        type: string
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        format: int64
        type: integer
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: http://kubernetes.io/docs/user-guide/labels
          +optional
        type: object
      managedFields:
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
        items:
          $ref: '#/definitions/ManagedFieldsEntry'
        type: array
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
          +optional
        type: string
      namespace:
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/namespaces
          +optional
        type: string
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
        items:
          $ref: '#/definitions/OwnerReference'
        type: array
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          SelfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
      spec:
        $ref: '#/definitions/PersistentVolumeClaimSpec'
      uid:
        $ref: '#/definitions/UID'
    type: object
  PersistentVolumeClaimVolumeSource:
    description: |-
      This volume finds the bound PV and mounts that volume for the pod. A
      PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another
      type of volume that is owned by someone else (the system).
    properties:
      claimName:
        description: |-
          ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        type: string
      readOnly:
        description: |-
          Will force the ReadOnly setting in VolumeMounts.
          Default false.
          +optional
        type: boolean
    title: PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace.
    type: object
  PersistentVolumeMode:
    title: PersistentVolumeMode describes how a volume is intended to be consumed, either Block or Filesystem.
    type: string
  PhotonPersistentDiskVolumeSource:
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        type: string
      pdID:
        description: ID that identifies Photon Controller persistent disk
        type: string
    title: Represents a Photon Controller persistent disk resource.
    type: object
  Pipeline:
    description: Pipeline is the Schema for the pipelines API
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: http://kubernetes.io/docs/user-guide/annotations
          +optional
        type: object
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      clusterName:
        description: |-
          The name of the cluster which the object belongs to.
          This is used to distinguish resources with same name and namespace in different clusters.
          This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
          +optional
        type: string
      creationTimestamp:
        $ref: '#/definitions/Time'
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        format: int64
        type: integer
      deletionTimestamp:
        $ref: '#/definitions/Time'
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
        items:
          type: string
        type: array
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will
          NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
          ServerTimeout indicating a unique name could not be found in the time allotted, and the client
          should retry (optionally after the time indicated in the Retry-After header).

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
        type: string
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        format: int64
        type: integer
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: http://kubernetes.io/docs/user-guide/labels
          +optional
        type: object
      managedFields:
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
        items:
          $ref: '#/definitions/ManagedFieldsEntry'
        type: array
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
          +optional
        type: string
      namespace:
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/namespaces
          +optional
        type: string
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
        items:
          $ref: '#/definitions/OwnerReference'
        type: array
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          SelfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
      spec:
        $ref: '#/definitions/PipelineSpec'
      status:
        $ref: '#/definitions/PipelineStatus'
      uid:
        $ref: '#/definitions/UID'
    type: object
  PipelineBatch:
    properties:
      rolling:
        type: boolean
      size:
        format: uint32
        type: integer
      windowMs:
        format: uint32
        type: integer
    type: object
  PipelineOutput:
    properties:
      joinWindowMs:
        description: msecs to wait for messages from multiple inputs to arrive before joining the inputs
        format: uint32
        type: integer
      steps:
        description: Previous step to receive data from
        items:
          type: string
        type: array
      stepsJoin:
        $ref: '#/definitions/JoinType'
      tensorMap:
        additionalProperties:
          type: string
        description: Map of tensor name conversions to use e.g. output1 -> input1
        type: object
    type: object
  PipelineSpec:
    description: PipelineSpec defines the desired state of Pipeline
    properties:
      output:
        $ref: '#/definitions/PipelineOutput'
      steps:
        description: The steps of this inference graph pipeline
        items:
          $ref: '#/definitions/PipelineStep'
        type: array
    type: object
  PipelineStatus:
    description: PipelineStatus defines the observed state of Pipeline
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is additional Status fields for the Resource to save some
          additional State as well as convey more information to the user. This is
          roughly akin to Annotations on any k8s resource, just the reconciler conveying
          richer information outwards.
        type: object
      conditions:
        $ref: '#/definitions/Conditions'
      observedGeneration:
        description: |-
          ObservedGeneration is the 'Generation' of the Service that
          was last processed by the controller.
          +optional
        format: int64
        type: integer
    type: object
  PipelineStep:
    properties:
      batch:
        $ref: '#/definitions/PipelineBatch'
      inputs:
        description: Previous step to receive data from
        items:
          type: string
        type: array
      inputsJoinType:
        $ref: '#/definitions/JoinType'
      joinWindowMs:
        description: msecs to wait for messages from multiple inputs to arrive before joining the inputs
        format: uint32
        type: integer
      name:
        description: Name of the step
        type: string
      tensorMap:
        additionalProperties:
          type: string
        description: Map of tensor name conversions to use e.g. output1 -> input1
        type: object
      triggers:
        description: Triggers required to activate step
        items:
          type: string
        type: array
      triggersJoinType:
        $ref: '#/definitions/JoinType'
    type: object
  Pod:
    description: |-
      Pod is a collection of containers that can run on a host. This resource is created
      by clients and scheduled onto hosts.
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: http://kubernetes.io/docs/user-guide/annotations
          +optional
        type: object
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      clusterName:
        description: |-
          The name of the cluster which the object belongs to.
          This is used to distinguish resources with same name and namespace in different clusters.
          This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
          +optional
        type: string
      creationTimestamp:
        $ref: '#/definitions/Time'
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        format: int64
        type: integer
      deletionTimestamp:
        $ref: '#/definitions/Time'
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
        items:
          type: string
        type: array
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will
          NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
          ServerTimeout indicating a unique name could not be found in the time allotted, and the client
          should retry (optionally after the time indicated in the Retry-After header).

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
        type: string
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        format: int64
        type: integer
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: http://kubernetes.io/docs/user-guide/labels
          +optional
        type: object
      managedFields:
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
        items:
          $ref: '#/definitions/ManagedFieldsEntry'
        type: array
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
          +optional
        type: string
      namespace:
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/namespaces
          +optional
        type: string
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
        items:
          $ref: '#/definitions/OwnerReference'
        type: array
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          SelfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
      spec:
        $ref: '#/definitions/PodSpec'
      status:
        $ref: '#/definitions/PodStatus'
      uid:
        $ref: '#/definitions/UID'
    type: object
  PodAffinity:
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
          node(s) with the highest sum are the most preferred.
          +optional
        items:
          $ref: '#/definitions/WeightedPodAffinityTerm'
        type: array
      requiredDuringSchedulingIgnoredDuringExecution:
        description: |-
          If the affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to a pod label update), the
          system may or may not try to eventually evict the pod from its node.
          When there are multiple elements, the lists of nodes corresponding to each
          podAffinityTerm are intersected, i.e. all terms must be satisfied.
          +optional
        items:
          $ref: '#/definitions/PodAffinityTerm'
        type: array
    title: Pod affinity is a group of inter pod affinity scheduling rules.
    type: object
  PodAffinityTerm:
    description: |-
      Defines a set of pods (namely those matching the labelSelector
      relative to the given namespace(s)) that this pod should be
      co-located (affinity) or not co-located (anti-affinity) with,
      where co-located is defined as running on a node whose value of
      the label with key <topologyKey> matches that of any node on which
      a pod of the set of pods is running
    properties:
      labelSelector:
        $ref: '#/definitions/LabelSelector'
      namespaces:
        description: |-
          namespaces specifies which namespaces the labelSelector applies to (matches against);
          null or empty list means "this pod's namespace"
          +optional
        items:
          type: string
        type: array
      topologyKey:
        description: |-
          This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
          the labelSelector in the specified namespaces, where co-located is defined as running on a node
          whose value of the label with key topologyKey matches that of any node on which any of the
          selected pods is running.
          Empty topologyKey is not allowed.
        type: string
    type: object
  PodAntiAffinity:
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the anti-affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling anti-affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
          node(s) with the highest sum are the most preferred.
          +optional
        items:
          $ref: '#/definitions/WeightedPodAffinityTerm'
        type: array
      requiredDuringSchedulingIgnoredDuringExecution:
        description: |-
          If the anti-affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the anti-affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to a pod label update), the
          system may or may not try to eventually evict the pod from its node.
          When there are multiple elements, the lists of nodes corresponding to each
          podAffinityTerm are intersected, i.e. all terms must be satisfied.
          +optional
        items:
          $ref: '#/definitions/PodAffinityTerm'
        type: array
    title: Pod anti affinity is a group of inter pod anti affinity scheduling rules.
    type: object
  PodCondition:
    properties:
      lastProbeTime:
        $ref: '#/definitions/Time'
      lastTransitionTime:
        $ref: '#/definitions/Time'
      message:
        description: |-
          Human-readable message indicating details about last transition.
          +optional
        type: string
      reason:
        description: |-
          Unique, one-word, CamelCase reason for the condition's last transition.
          +optional
        type: string
      status:
        $ref: '#/definitions/ConditionStatus'
      type:
        $ref: '#/definitions/PodConditionType'
    title: PodCondition contains details for the current condition of this pod.
    type: object
  PodConditionType:
    description: PodConditionType is a valid value for PodCondition.Type
    type: string
  PodDNSConfig:
    description: |-
      PodDNSConfig defines the DNS parameters of a pod in addition to
      those generated from DNSPolicy.
    properties:
      nameservers:
        description: |-
          A list of DNS name server IP addresses.
          This will be appended to the base nameservers generated from DNSPolicy.
          Duplicated nameservers will be removed.
          +optional
        items:
          type: string
        type: array
      options:
        description: |-
          A list of DNS resolver options.
          This will be merged with the base options generated from DNSPolicy.
          Duplicated entries will be removed. Resolution options given in Options
          will override those that appear in the base DNSPolicy.
          +optional
        items:
          $ref: '#/definitions/PodDNSConfigOption'
        type: array
      searches:
        description: |-
          A list of DNS search domains for host-name lookup.
          This will be appended to the base search paths generated from DNSPolicy.
          Duplicated search paths will be removed.
          +optional
        items:
          type: string
        type: array
    type: object
  PodDNSConfigOption:
    properties:
      name:
        description: Required.
        type: string
      value:
        description: +optional
        type: string
    title: PodDNSConfigOption defines DNS resolver options of a pod.
    type: object
  PodFSGroupChangePolicy:
    description: |-
      PodFSGroupChangePolicy holds policies that will be used for applying fsGroup to a volume
      when volume is mounted.
    type: string
  PodIP:
    description: |-
      Each entry includes:
      IP: An IP address allocated to the pod. Routable at least within the cluster.
    properties:
      ip:
        description: ip is an IP address (IPv4 or IPv6) assigned to the pod
        type: string
    title: IP address information for entries in the (plural) PodIPs field.
    type: object
  PodList:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      continue:
        description: |-
          continue may be set if the user set a limit on the number of items returned, and indicates that
          the server has more data available. The value is opaque and may be used to issue another request
          to the endpoint that served this list to retrieve the next set of available objects. Continuing a
          consistent list may not be possible if the server configuration has changed or more than a few
          minutes have passed. The resourceVersion field returned when using this continue value will be
          identical to the value in the first response, unless you have received this token from an error
          message.
        type: string
      items:
        description: |-
          List of pods.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
        items:
          $ref: '#/definitions/Pod'
        type: array
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      remainingItemCount:
        description: |-
          remainingItemCount is the number of subsequent items in the list which are not included in this
          list response. If the list request contained label or field selectors, then the number of
          remaining items is unknown and the field will be left unset and omitted during serialization.
          If the list is complete (either because it is not chunking or because this is the last chunk),
          then there are no more remaining items and this field will be left unset and omitted during
          serialization.
          Servers older than v1.15 do not set this field.
          The intended use of the remainingItemCount is *estimating* the size of a collection. Clients
          should not rely on the remainingItemCount to be set or to be exact.
          +optional
        format: int64
        type: integer
      resourceVersion:
        description: |-
          String that identifies the server's internal version of this object that
          can be used by clients to determine when objects have changed.
          Value must be treated as opaque by clients and passed unmodified back to the server.
          Populated by the system.
          Read-only.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          selfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
    title: PodList is a list of Pods.
    type: object
  PodPhase:
    title: PodPhase is a label for the condition of a pod at the current time.
    type: string
  PodQOSClass:
    title: PodQOSClass defines the supported qos classes of Pods.
    type: string
  PodReadinessGate:
    description: PodReadinessGate contains the reference to a pod condition
    properties:
      conditionType:
        $ref: '#/definitions/PodConditionType'
    type: object
  PodSecurityContext:
    description: |-
      Some fields are also present in container.securityContext.  Field values of
      container.securityContext take precedence over field values of PodSecurityContext.
    properties:
      fsGroup:
        description: |-
          A special supplemental group that applies to all containers in a pod.
          Some volume types allow the Kubelet to change the ownership of that volume
          to be owned by the pod:

          1. The owning GID will be the FSGroup
          2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
          3. The permission bits are OR'd with rw-rw----

          If unset, the Kubelet will not modify the ownership and permissions of any volume.
          +optional
        format: int64
        type: integer
      fsGroupChangePolicy:
        $ref: '#/definitions/PodFSGroupChangePolicy'
      runAsGroup:
        description: |-
          The GID to run the entrypoint of the container process.
          Uses runtime default if unset.
          May also be set in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence
          for that container.
          +optional
        format: int64
        type: integer
      runAsNonRoot:
        description: |-
          Indicates that the container must run as a non-root user.
          If true, the Kubelet will validate the image at runtime to ensure that it
          does not run as UID 0 (root) and fail to start the container if it does.
          If unset or false, no such validation will be performed.
          May also be set in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        type: boolean
      runAsUser:
        description: |-
          The UID to run the entrypoint of the container process.
          Defaults to user specified in image metadata if unspecified.
          May also be set in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence
          for that container.
          +optional
        format: int64
        type: integer
      seLinuxOptions:
        $ref: '#/definitions/SELinuxOptions'
      seccompProfile:
        $ref: '#/definitions/SeccompProfile'
      supplementalGroups:
        description: |-
          A list of groups applied to the first process run in each container, in addition
          to the container's primary GID.  If unspecified, no groups will be added to
          any container.
          +optional
        items:
          format: int64
          type: integer
        type: array
      sysctls:
        description: |-
          Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
          sysctls (by the container runtime) might fail to launch.
          +optional
        items:
          $ref: '#/definitions/Sysctl'
        type: array
      windowsOptions:
        $ref: '#/definitions/WindowsSecurityContextOptions'
    title: PodSecurityContext holds pod-level security attributes and common container settings.
    type: object
  PodSpec:
    properties:
      activeDeadlineSeconds:
        description: |-
          Optional duration in seconds the pod may be active on the node relative to
          StartTime before the system will actively try to mark it failed and kill associated containers.
          Value must be a positive integer.
          +optional
        format: int64
        type: integer
      affinity:
        $ref: '#/definitions/Affinity'
      automountServiceAccountToken:
        description: |-
          AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
          +optional
        type: boolean
      containers:
        description: |-
          List of containers belonging to the pod.
          Containers cannot currently be added or removed.
          There must be at least one container in a Pod.
          Cannot be updated.
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/Container'
        type: array
      dnsConfig:
        $ref: '#/definitions/PodDNSConfig'
      dnsPolicy:
        $ref: '#/definitions/DNSPolicy'
      enableServiceLinks:
        description: |-
          EnableServiceLinks indicates whether information about services should be injected into pod's
          environment variables, matching the syntax of Docker links.
          Optional: Defaults to true.
          +optional
        type: boolean
      ephemeralContainers:
        description: |-
          List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing
          pod to perform user-initiated actions such as debugging. This list cannot be specified when
          creating a pod, and it cannot be modified by updating the pod spec. In order to add an
          ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
          This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/EphemeralContainer'
        type: array
      hostAliases:
        description: |-
          HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts
          file if specified. This is only valid for non-hostNetwork pods.
          +optional
          +patchMergeKey=ip
          +patchStrategy=merge
        items:
          $ref: '#/definitions/HostAlias'
        type: array
      hostIPC:
        description: |-
          Use the host's ipc namespace.
          Optional: Default to false.
          +k8s:conversion-gen=false
          +optional
        type: boolean
      hostNetwork:
        description: |-
          Host networking requested for this pod. Use the host's network namespace.
          If this option is set, the ports that will be used must be specified.
          Default to false.
          +k8s:conversion-gen=false
          +optional
        type: boolean
      hostPID:
        description: |-
          Use the host's pid namespace.
          Optional: Default to false.
          +k8s:conversion-gen=false
          +optional
        type: boolean
      hostname:
        description: |-
          Specifies the hostname of the Pod
          If not specified, the pod's hostname will be set to a system-defined value.
          +optional
        type: string
      imagePullSecrets:
        description: |-
          ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
          If specified, these secrets will be passed to individual puller implementations for them to use. For example,
          in the case of docker, only DockerConfig type secrets are honored.
          More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/LocalObjectReference'
        type: array
      initContainers:
        description: |-
          List of initialization containers belonging to the pod.
          Init containers are executed in order prior to containers being started. If any
          init container fails, the pod is considered to have failed and is handled according
          to its restartPolicy. The name for an init container or normal container must be
          unique among all containers.
          Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.
          The resourceRequirements of an init container are taken into account during scheduling
          by finding the highest request/limit for each resource type, and then using the max of
          of that value or the sum of the normal containers. Limits are applied to init containers
          in a similar fashion.
          Init containers cannot currently be added or removed.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/Container'
        type: array
      nodeName:
        description: |-
          NodeName is a request to schedule this pod onto a specific node. If it is non-empty,
          the scheduler simply schedules this pod onto that node, assuming that it fits resource
          requirements.
          +optional
        type: string
      nodeSelector:
        additionalProperties:
          type: string
        description: |-
          NodeSelector is a selector which must be true for the pod to fit on a node.
          Selector which must match a node's labels for the pod to be scheduled on that node.
          More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
          +optional
        type: object
      overhead:
        $ref: '#/definitions/ResourceList'
      preemptionPolicy:
        $ref: '#/definitions/PreemptionPolicy'
      priority:
        description: |-
          The priority value. Various system components use this field to find the
          priority of the pod. When Priority Admission Controller is enabled, it
          prevents users from setting this field. The admission controller populates
          this field from PriorityClassName.
          The higher the value, the higher the priority.
          +optional
        format: int32
        type: integer
      priorityClassName:
        description: |-
          If specified, indicates the pod's priority. "system-node-critical" and
          "system-cluster-critical" are two special keywords which indicate the
          highest priorities with the former being the highest priority. Any other
          name must be defined by creating a PriorityClass object with that name.
          If not specified, the pod priority will be default or zero if there is no
          default.
          +optional
        type: string
      readinessGates:
        description: |-
          If specified, all readiness gates will be evaluated for pod readiness.
          A pod is ready when all its containers are ready AND
          all conditions specified in the readiness gates have status equal to "True"
          More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
          +optional
        items:
          $ref: '#/definitions/PodReadinessGate'
        type: array
      restartPolicy:
        $ref: '#/definitions/RestartPolicy'
      runtimeClassName:
        description: |-
          RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used
          to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.
          If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an
          empty definition that uses the default runtime handler.
          More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
          This is a beta feature as of Kubernetes v1.14.
          +optional
        type: string
      schedulerName:
        description: |-
          If specified, the pod will be dispatched by specified scheduler.
          If not specified, the pod will be dispatched by default scheduler.
          +optional
        type: string
      securityContext:
        $ref: '#/definitions/PodSecurityContext'
      serviceAccount:
        description: |-
          DeprecatedServiceAccount is a depreciated alias for ServiceAccountName.
          Deprecated: Use serviceAccountName instead.
          +k8s:conversion-gen=false
          +optional
        type: string
      serviceAccountName:
        description: |-
          ServiceAccountName is the name of the ServiceAccount to use to run this pod.
          More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
          +optional
        type: string
      setHostnameAsFQDN:
        description: |-
          If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default).
          In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname).
          In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN.
          If a pod does not have FQDN, this has no effect.
          Default to false.
          +optional
        type: boolean
      shareProcessNamespace:
        description: |-
          Share a single process namespace between all of the containers in a pod.
          When this is set containers will be able to view and signal processes from other containers
          in the same pod, and the first process in each container will not be assigned PID 1.
          HostPID and ShareProcessNamespace cannot both be set.
          Optional: Default to false.
          +k8s:conversion-gen=false
          +optional
        type: boolean
      subdomain:
        description: |-
          If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
          If not specified, the pod will not have a domainname at all.
          +optional
        type: string
      terminationGracePeriodSeconds:
        description: |-
          Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period will be used instead.
          The grace period is the duration in seconds after the processes running in the pod are sent
          a termination signal and the time when the processes are forcibly halted with a kill signal.
          Set this value longer than the expected cleanup time for your process.
          Defaults to 30 seconds.
          +optional
        format: int64
        type: integer
      tolerations:
        description: |-
          If specified, the pod's tolerations.
          +optional
        items:
          $ref: '#/definitions/Toleration'
        type: array
      topologySpreadConstraints:
        description: |-
          TopologySpreadConstraints describes how a group of pods ought to spread across topology
          domains. Scheduler will schedule pods in a way which abides by the constraints.
          All topologySpreadConstraints are ANDed.
          +optional
          +patchMergeKey=topologyKey
          +patchStrategy=merge
          +listType=map
          +listMapKey=topologyKey
          +listMapKey=whenUnsatisfiable
        items:
          $ref: '#/definitions/TopologySpreadConstraint'
        type: array
      volumes:
        description: |-
          List of volumes that can be mounted by containers belonging to the pod.
          More info: https://kubernetes.io/docs/concepts/storage/volumes
          +optional
          +patchMergeKey=name
          +patchStrategy=merge,retainKeys
        items:
          $ref: '#/definitions/Volume'
        type: array
    title: PodSpec is a description of a pod.
    type: object
  PodStatus:
    description: |-
      PodStatus represents information about the status of a pod. Status may trail the actual
      state of a system, especially if the node that hosts the pod cannot contact the control
      plane.
    properties:
      conditions:
        description: |-
          Current service state of pod.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
          +optional
          +patchMergeKey=type
          +patchStrategy=merge
        items:
          $ref: '#/definitions/PodCondition'
        type: array
      containerStatuses:
        description: |-
          The list has one entry per container in the manifest. Each entry is currently the output
          of `docker inspect`.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
          +optional
        items:
          $ref: '#/definitions/ContainerStatus'
        type: array
      ephemeralContainerStatuses:
        description: |-
          Status for any ephemeral containers that have run in this pod.
          This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature.
          +optional
        items:
          $ref: '#/definitions/ContainerStatus'
        type: array
      hostIP:
        description: |-
          IP address of the host to which the pod is assigned. Empty if not yet scheduled.
          +optional
        type: string
      initContainerStatuses:
        description: |-
          The list has one entry per init container in the manifest. The most recent successful
          init container will have ready = true, the most recently started container will have
          startTime set.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
        items:
          $ref: '#/definitions/ContainerStatus'
        type: array
      message:
        description: |-
          A human readable message indicating details about why the pod is in this condition.
          +optional
        type: string
      nominatedNodeName:
        description: |-
          nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be
          scheduled right away as preemption victims receive their graceful termination periods.
          This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide
          to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to
          give the resources on this node to a higher priority pod that is created after preemption.
          As a result, this field may be different than PodSpec.nodeName when the pod is
          scheduled.
          +optional
        type: string
      phase:
        $ref: '#/definitions/PodPhase'
      podIP:
        description: |-
          IP address allocated to the pod. Routable at least within the cluster.
          Empty if not yet allocated.
          +optional
        type: string
      podIPs:
        description: |-
          podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must
          match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list
          is empty if no IPs have been allocated yet.
          +optional
          +patchStrategy=merge
          +patchMergeKey=ip
        items:
          $ref: '#/definitions/PodIP'
        type: array
      qosClass:
        $ref: '#/definitions/PodQOSClass'
      reason:
        description: |-
          A brief CamelCase message indicating details about why the pod is in this state.
          e.g. 'Evicted'
          +optional
        type: string
      startTime:
        $ref: '#/definitions/Time'
    type: object
  PodTemplateSpec:
    description: PodTemplateSpec describes the data a pod should have when created from a template
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: http://kubernetes.io/docs/user-guide/annotations
          +optional
        type: object
      clusterName:
        description: |-
          The name of the cluster which the object belongs to.
          This is used to distinguish resources with same name and namespace in different clusters.
          This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
          +optional
        type: string
      creationTimestamp:
        $ref: '#/definitions/Time'
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        format: int64
        type: integer
      deletionTimestamp:
        $ref: '#/definitions/Time'
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
        items:
          type: string
        type: array
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will
          NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
          ServerTimeout indicating a unique name could not be found in the time allotted, and the client
          should retry (optionally after the time indicated in the Retry-After header).

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
        type: string
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        format: int64
        type: integer
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: http://kubernetes.io/docs/user-guide/labels
          +optional
        type: object
      managedFields:
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
        items:
          $ref: '#/definitions/ManagedFieldsEntry'
        type: array
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
          +optional
        type: string
      namespace:
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/namespaces
          +optional
        type: string
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
        items:
          $ref: '#/definitions/OwnerReference'
        type: array
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          SelfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
      spec:
        $ref: '#/definitions/PodSpec'
      uid:
        $ref: '#/definitions/UID'
    type: object
  PodsMetricSource:
    description: |-
      PodsMetricSource indicates how to scale on a metric describing each pod in
      the current scale target (for example, transactions-processed-per-second).
      The values will be averaged together before being compared to the target
      value.
    properties:
      metricName:
        description: metricName is the name of the metric in question
        type: string
      selector:
        $ref: '#/definitions/LabelSelector'
      targetAverageValue:
        $ref: '#/definitions/Quantity'
    type: object
  PortworxVolumeSource:
    properties:
      fsType:
        description: |-
          FSType represents the filesystem type to mount
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        type: string
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      volumeID:
        description: VolumeID uniquely identifies a Portworx volume
        type: string
    title: PortworxVolumeSource represents a Portworx volume resource.
    type: object
  PredictiveUnit:
    properties:
      children:
        items:
          $ref: '#/definitions/PredictiveUnit'
        type: array
      endpoint:
        $ref: '#/definitions/Endpoint'
      envSecretRefName:
        type: string
      implementation:
        $ref: '#/definitions/PredictiveUnitImplementation'
      logger:
        $ref: '#/definitions/Logger'
      methods:
        items:
          $ref: '#/definitions/PredictiveUnitMethod'
        type: array
      modelUri:
        type: string
      name:
        type: string
      parameters:
        items:
          $ref: '#/definitions/Parameter'
        type: array
      serviceAccountName:
        type: string
      storageInitializerImage:
        type: string
      type:
        $ref: '#/definitions/PredictiveUnitType'
    type: object
  PredictiveUnitImplementation:
    type: string
  PredictiveUnitMethod:
    type: string
  PredictiveUnitType:
    type: string
  PredictorSpec:
    properties:
      annotations:
        additionalProperties:
          type: string
        type: object
      componentSpecs:
        items:
          $ref: '#/definitions/SeldonPodSpec'
        type: array
      engineResources:
        $ref: '#/definitions/ResourceRequirements'
      explainer:
        $ref: '#/definitions/Explainer'
      graph:
        $ref: '#/definitions/PredictiveUnit'
      labels:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      replicas:
        format: int32
        type: integer
      shadow:
        type: boolean
      ssl:
        $ref: '#/definitions/SSL'
      svcOrchSpec:
        $ref: '#/definitions/SvcOrchSpec'
      traffic:
        format: int32
        type: integer
    type: object
  PreemptionPolicy:
    title: PreemptionPolicy describes a policy for if/when to preempt a pod.
    type: string
  PreferredSchedulingTerm:
    description: |-
      An empty preferred scheduling term matches all objects with implicit weight 0
      (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
    properties:
      preference:
        $ref: '#/definitions/NodeSelectorTerm'
      weight:
        description: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        format: int32
        type: integer
    type: object
  Probe:
    description: |-
      Probe describes a health check to be performed against a container to determine whether it is
      alive or ready to receive traffic.
    properties:
      exec:
        $ref: '#/definitions/ExecAction'
      failureThreshold:
        description: |-
          Minimum consecutive failures for the probe to be considered failed after having succeeded.
          Defaults to 3. Minimum value is 1.
          +optional
        format: int32
        type: integer
      httpGet:
        $ref: '#/definitions/HTTPGetAction'
      initialDelaySeconds:
        description: |-
          Number of seconds after the container has started before liveness probes are initiated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
        format: int32
        type: integer
      periodSeconds:
        description: |-
          How often (in seconds) to perform the probe.
          Default to 10 seconds. Minimum value is 1.
          +optional
        format: int32
        type: integer
      successThreshold:
        description: |-
          Minimum consecutive successes for the probe to be considered successful after having failed.
          Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
          +optional
        format: int32
        type: integer
      tcpSocket:
        $ref: '#/definitions/TCPSocketAction'
      timeoutSeconds:
        description: |-
          Number of seconds after which the probe times out.
          Defaults to 1 second. Minimum value is 1.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
        format: int32
        type: integer
    type: object
  ProcMountType:
    type: string
  ProjectedVolumeSource:
    description: Represents a projected volume source
    properties:
      defaultMode:
        description: |-
          Mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        format: int32
        type: integer
      sources:
        description: list of volume projections
        items:
          $ref: '#/definitions/VolumeProjection'
        type: array
    type: object
  Protocol:
    type: string
  PullPolicy:
    description: PullPolicy describes a policy for if/when to pull a container image
    type: string
  Quantity:
    description: |-
      The serialization format is:

      <quantity>        ::= <signedNumber><suffix>
      (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
      <digit>           ::= 0 | 1 | ... | 9
      <digits>          ::= <digit> | <digit><digits>
      <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits>
      <sign>            ::= "+" | "-"
      <signedNumber>    ::= <number> | <sign><number>
      <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI>
      <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
      (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
      <decimalSI>       ::= m | "" | k | M | G | T | P | E
      (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
      <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

      No matter which of the three exponent forms is used, no quantity may represent
      a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal
      places. Numbers larger or more precise will be capped or rounded up.
      (E.g.: 0.1m will rounded up to 1m.)
      This may be extended in the future if we require larger or smaller quantities.

      When a Quantity is parsed from a string, it will remember the type of suffix
      it had, and will use the same type again when it is serialized.

      Before serializing, Quantity will be put in "canonical form".
      This means that Exponent/suffix will be adjusted up or down (with a
      corresponding increase or decrease in Mantissa) such that:
      a. No precision is lost
      b. No fractional digits will be emitted
      c. The exponent (or suffix) is as large as possible.
      The sign will be omitted unless the number is negative.

      Examples:
      1.5 will be serialized as "1500m"
      1.5Gi will be serialized as "1536Mi"

      Note that the quantity will NEVER be internally represented by a
      floating point number. That is the whole point of this exercise.

      Non-canonical values will still parse as long as they are well formed,
      but will be re-emitted in their canonical form. (So always use canonical
      form, or don't diff.)

      This format is intended to make it difficult to use these numbers without
      writing some sort of special handling code in the hopes that that will
      cause implementors to also use a fixed point implementation.

      +protobuf=true
      +protobuf.embed=string
      +protobuf.options.marshal=false
      +protobuf.options.(gogoproto.goproto_stringer)=false
      +k8s:deepcopy-gen=true
      +k8s:openapi-gen=true
    title: |-
      Quantity is a fixed-point representation of a number.
      It provides convenient marshaling/unmarshaling in JSON and YAML,
      in addition to String() and AsInt64() accessors.
    type: object
  QuobyteVolumeSource:
    description: Quobyte volumes do not support ownership management or SELinux relabeling.
    properties:
      group:
        description: |-
          Group to map volume access to
          Default is no group
          +optional
        type: string
      readOnly:
        description: |-
          ReadOnly here will force the Quobyte volume to be mounted with read-only permissions.
          Defaults to false.
          +optional
        type: boolean
      registry:
        description: |-
          Registry represents a single or multiple Quobyte Registry services
          specified as a string as host:port pair (multiple entries are separated with commas)
          which acts as the central registry for volumes
        type: string
      tenant:
        description: |-
          Tenant owning the given Quobyte volume in the Backend
          Used with dynamically provisioned Quobyte volumes, value is set by the plugin
          +optional
        type: string
      user:
        description: |-
          User to map volume access to
          Defaults to serivceaccount user
          +optional
        type: string
      volume:
        description: Volume is a string that references an already created Quobyte volume by name.
        type: string
    title: Represents a Quobyte mount that lasts the lifetime of a pod.
    type: object
  RBDVolumeSource:
    description: RBD volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: |-
          Filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      image:
        description: |-
          The rados image name.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        type: string
      keyring:
        description: |-
          Keyring is the path to key ring for RBDUser.
          Default is /etc/ceph/keyring.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
        type: string
      monitors:
        description: |-
          A collection of Ceph monitors.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        items:
          type: string
        type: array
      pool:
        description: |-
          The rados pool name.
          Default is rbd.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
        type: string
      readOnly:
        description: |-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
        type: boolean
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
      user:
        description: |-
          The rados user name.
          Default is admin.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
        type: string
    title: Represents a Rados Block Device mount that lasts the lifetime of a pod.
    type: object
  ResourceFieldSelector:
    description: ResourceFieldSelector represents container resources (cpu, memory) and their output format
    properties:
      containerName:
        description: |-
          Container name: required for volumes, optional for env vars
          +optional
        type: string
      divisor:
        $ref: '#/definitions/Quantity'
      resource:
        description: 'Required: resource to select'
        type: string
    type: object
  ResourceList:
    additionalProperties:
      $ref: '#/definitions/Quantity'
    title: ResourceList is a set of (resource name, quantity) pairs.
    type: object
  ResourceMetricSource:
    description: |-
      ResourceMetricSource indicates how to scale on a resource metric known to
      Kubernetes, as specified in requests and limits, describing each pod in the
      current scale target (e.g. CPU or memory).  The values will be averaged
      together before being compared to the target.  Such metrics are built in to
      Kubernetes, and have special scaling options on top of those available to
      normal per-pod metrics using the "pods" source.  Only one "target" type
      should be set.
    properties:
      name:
        $ref: '#/definitions/ResourceName'
      targetAverageUtilization:
        description: |-
          targetAverageUtilization is the target value of the average of the
          resource metric across all relevant pods, represented as a percentage of
          the requested value of the resource for the pods.
          +optional
        format: int32
        type: integer
      targetAverageValue:
        $ref: '#/definitions/Quantity'
    type: object
  ResourceName:
    title: ResourceName is the name identifying various resources in a ResourceList.
    type: string
  ResourceRequirements:
    properties:
      limits:
        $ref: '#/definitions/ResourceList'
      requests:
        $ref: '#/definitions/ResourceList'
    title: ResourceRequirements describes the compute resource requirements.
    type: object
  ResourceType:
    type: string
  RestartPolicy:
    description: |-
      Only one of the following restart policies may be specified.
      If none of the following policies is specified, the default one
      is RestartPolicyAlways.
    title: RestartPolicy describes how the container should be restarted.
    type: string
  RollingUpdateDeployment:
    properties:
      maxSurge:
        $ref: '#/definitions/IntOrString'
      maxUnavailable:
        $ref: '#/definitions/IntOrString'
    title: Spec to control the desired behavior of rolling update.
    type: object
  SELinuxOptions:
    description: SELinuxOptions are the labels to be applied to the container
    properties:
      level:
        description: |-
          Level is SELinux level label that applies to the container.
          +optional
        type: string
      role:
        description: |-
          Role is a SELinux role label that applies to the container.
          +optional
        type: string
      type:
        description: |-
          Type is a SELinux type label that applies to the container.
          +optional
        type: string
      user:
        description: |-
          User is a SELinux user label that applies to the container.
          +optional
        type: string
    type: object
  SSL:
    properties:
      certSecretName:
        type: string
    type: object
  ScaleIOVolumeSource:
    description: ScaleIOVolumeSource represents a persistent ScaleIO volume
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs".
          Default is "xfs".
          +optional
        type: string
      gateway:
        description: The host address of the ScaleIO API Gateway.
        type: string
      protectionDomain:
        description: |-
          The name of the ScaleIO Protection Domain for the configured storage.
          +optional
        type: string
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
      sslEnabled:
        description: |-
          Flag to enable/disable SSL communication with Gateway, default false
          +optional
        type: boolean
      storageMode:
        description: |-
          Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
          Default is ThinProvisioned.
          +optional
        type: string
      storagePool:
        description: |-
          The ScaleIO Storage Pool associated with the protection domain.
          +optional
        type: string
      system:
        description: The name of the storage system as configured in ScaleIO.
        type: string
      volumeName:
        description: |-
          The name of a volume already created in the ScaleIO system
          that is associated with this volume source.
        type: string
    type: object
  ScaleTriggers:
    description: ScaleTriggers reference the scaler that will be used
    properties:
      authenticationRef:
        $ref: '#/definitions/ScaledObjectAuthRef'
      metadata:
        additionalProperties:
          type: string
        type: object
      metricType:
        $ref: '#/definitions/MetricTargetType'
      name:
        description: +optional
        type: string
      type:
        type: string
    type: object
  ScaledObjectAuthRef:
    description: |-
      ScaledObjectAuthRef points to the TriggerAuthentication or ClusterTriggerAuthentication object that
      is used to authenticate the scaler with the environment
    properties:
      kind:
        description: |-
          Kind of the resource being referred to. Defaults to TriggerAuthentication.
          +optional
        type: string
      name:
        type: string
    type: object
  ScalingPolicySelect:
    description: ScalingPolicySelect is used to specify which policy should be used while scaling in a certain direction
    type: string
  SeccompProfile:
    description: |-
      Only one profile source may be set.
      +union
    properties:
      localhostProfile:
        description: |-
          localhostProfile indicates a profile defined in a file on the node should be used.
          The profile must be preconfigured on the node to work.
          Must be a descending path, relative to the kubelet's configured seccomp profile location.
          Must only be set if type is "Localhost".
          +optional
        type: string
      type:
        $ref: '#/definitions/SeccompProfileType'
    title: SeccompProfile defines a pod/container's seccomp profile settings.
    type: object
  SeccompProfileType:
    title: SeccompProfileType defines the supported seccomp profile types.
    type: string
  SecretEnvSource:
    description: |-
      The contents of the target Secret's Data field will represent the
      key-value pairs as environment variables.
    properties:
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the Secret must be defined
          +optional
        type: boolean
    title: |-
      SecretEnvSource selects a Secret to populate the environment
      variables with.
    type: object
  SecretKeySelector:
    properties:
      key:
        description: The key of the secret to select from.  Must be a valid secret key.
        type: string
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the Secret or its key must be defined
          +optional
        type: boolean
    title: SecretKeySelector selects a key of a Secret.
    type: object
  SecretProjection:
    description: |-
      The contents of the target Secret's Data field will be presented in a
      projected volume as files using the keys in the Data field as the file names.
      Note that this is identical to a secret volume source without the default
      mode.
    properties:
      items:
        description: |-
          If unspecified, each key-value pair in the Data field of the referenced
          Secret will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the Secret,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/KeyToPath'
        type: array
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the Secret or its key must be defined
          +optional
        type: boolean
    title: Adapts a secret into a projected volume.
    type: object
  SecretVolumeSource:
    description: |-
      The contents of the target Secret's Data field will be presented in a volume
      as files using the keys in the Data field as the file names.
      Secret volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        description: |-
          Optional: mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values
          for mode bits. Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        format: int32
        type: integer
      items:
        description: |-
          If unspecified, each key-value pair in the Data field of the referenced
          Secret will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the Secret,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/KeyToPath'
        type: array
      optional:
        description: |-
          Specify whether the Secret or its keys must be defined
          +optional
        type: boolean
      secretName:
        description: |-
          Name of the secret in the pod's namespace to use.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
          +optional
        type: string
    title: Adapts a Secret into a volume.
    type: object
  SecurityContext:
    description: |-
      Some fields are present in both SecurityContext and PodSecurityContext.  When both
      are set, the values in SecurityContext take precedence.
    properties:
      allowPrivilegeEscalation:
        description: |-
          AllowPrivilegeEscalation controls whether a process can gain more
          privileges than its parent process. This bool directly controls if
          the no_new_privs flag will be set on the container process.
          AllowPrivilegeEscalation is true always when the container is:
          1) run as Privileged
          2) has CAP_SYS_ADMIN
          +optional
        type: boolean
      capabilities:
        $ref: '#/definitions/Capabilities'
      privileged:
        description: |-
          Run container in privileged mode.
          Processes in privileged containers are essentially equivalent to root on the host.
          Defaults to false.
          +optional
        type: boolean
      procMount:
        $ref: '#/definitions/ProcMountType'
      readOnlyRootFilesystem:
        description: |-
          Whether this container has a read-only root filesystem.
          Default is false.
          +optional
        type: boolean
      runAsGroup:
        description: |-
          The GID to run the entrypoint of the container process.
          Uses runtime default if unset.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        format: int64
        type: integer
      runAsNonRoot:
        description: |-
          Indicates that the container must run as a non-root user.
          If true, the Kubelet will validate the image at runtime to ensure that it
          does not run as UID 0 (root) and fail to start the container if it does.
          If unset or false, no such validation will be performed.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        type: boolean
      runAsUser:
        description: |-
          The UID to run the entrypoint of the container process.
          Defaults to user specified in image metadata if unspecified.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        format: int64
        type: integer
      seLinuxOptions:
        $ref: '#/definitions/SELinuxOptions'
      seccompProfile:
        $ref: '#/definitions/SeccompProfile'
      windowsOptions:
        $ref: '#/definitions/WindowsSecurityContextOptions'
    title: SecurityContext holds security configuration that will be applied to a container.
    type: object
  SeldonAddressable:
    description: https://github.com/kubernetes-sigs/controller-tools/issues/391
    properties:
      url:
        type: string
    title: 'Addressable placeholder until duckv1 issue is fixed:'
    type: object
  SeldonDeployment:
    description: |-
      +genclient
      +genclient:noStatus
      +kubebuilder:object:root=true
      +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
      +kubebuilder:storageversion
      SeldonDeployment is the Schema for the seldondeployments API
      +k8s:openapi-gen=true
      +kubebuilder:resource:shortName=sdep
      +kubebuilder:subresource:status
      +kubebuilder:subresource:scale:specpath=.spec.replicas,statuspath=.status.replicas
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      metadata:
        $ref: '#/definitions/ObjectMeta'
      spec:
        $ref: '#/definitions/SeldonDeploymentSpec'
      status:
        $ref: '#/definitions/SeldonDeploymentStatus'
    type: object
  SeldonDeploymentList:
    properties:
      apiVersion:
        type: string
      items:
        items:
          $ref: '#/definitions/SeldonDeployment'
        type: array
      kind:
        type: string
      metadata:
        $ref: '#/definitions/ListMeta'
    type: object
  SeldonDeploymentSpec:
    description: SeldonDeploymentSpec defines the desired state of SeldonDeployment
    properties:
      annotations:
        additionalProperties:
          type: string
        type: object
      name:
        description: Name is Deprecated will be removed in future
        type: string
      oauth_key:
        type: string
      oauth_secret:
        type: string
      predictors:
        items:
          $ref: '#/definitions/PredictorSpec'
        type: array
      protocol:
        $ref: '#/definitions/Protocol'
      replicas:
        format: int32
        type: integer
      serverType:
        $ref: '#/definitions/ServerType'
      transport:
        $ref: '#/definitions/Transport'
    type: object
  SeldonDeploymentStatus:
    description: SeldonDeploymentStatus defines the observed state of SeldonDeployment
    properties:
      address:
        $ref: '#/definitions/SeldonAddressable'
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is additional Status fields for the Resource to save some
          additional State as well as convey more information to the user. This is
          roughly akin to Annotations on any k8s resource, just the reconciler conveying
          richer information outwards.
        type: object
      conditions:
        $ref: '#/definitions/Conditions'
      deploymentStatus:
        additionalProperties:
          $ref: '#/definitions/DeploymentStatus'
        type: object
      description:
        type: string
      observedGeneration:
        description: |-
          ObservedGeneration is the 'Generation' of the Service that
          was last processed by the controller.
          +optional
        format: int64
        type: integer
      replicas:
        format: int32
        type: integer
      serviceStatus:
        additionalProperties:
          $ref: '#/definitions/ServiceStatus'
        type: object
      state:
        $ref: '#/definitions/StatusState'
    type: object
  SeldonExperiment:
    properties:
      apiVersion:
        type: string
      kind:
        type: string
      metadata:
        $ref: '#/definitions/ObjectMeta'
      spec:
        $ref: '#/definitions/ExperimentSpec'
      status:
        $ref: '#/definitions/ExperimentStatus'
    type: object
  SeldonHpaSpec:
    properties:
      maxReplicas:
        format: int32
        type: integer
      metrics:
        items:
          $ref: '#/definitions/MetricSpec'
        type: array
      minReplicas:
        format: int32
        type: integer
    type: object
  SeldonModel:
    properties:
      apiVersion:
        type: string
      kind:
        type: string
      metadata:
        $ref: '#/definitions/ObjectMeta'
      spec:
        $ref: '#/definitions/ModelSpec'
      status:
        $ref: '#/definitions/ModelStatus'
    type: object
  SeldonModelList:
    properties:
      apiVersion:
        type: string
      items:
        items:
          $ref: '#/definitions/Model'
        type: array
      kind:
        type: string
      metadata:
        $ref: '#/definitions/ListMeta'
    type: object
  SeldonPdbSpec:
    properties:
      maxUnavailable:
        $ref: '#/definitions/IntOrString'
      minAvailable:
        $ref: '#/definitions/IntOrString'
    type: object
  SeldonPipeline:
    properties:
      apiVersion:
        type: string
      kind:
        type: string
      metadata:
        $ref: '#/definitions/ObjectMeta'
      spec:
        $ref: '#/definitions/PipelineSpec'
      status:
        $ref: '#/definitions/PipelineStatus'
    type: object
  SeldonPipelineList:
    properties:
      apiVersion:
        type: string
      items:
        items:
          $ref: '#/definitions/Pipeline'
        type: array
      kind:
        type: string
      metadata:
        $ref: '#/definitions/ListMeta'
    type: object
  SeldonPodSpec:
    properties:
      hpaSpec:
        $ref: '#/definitions/SeldonHpaSpec'
      kedaSpec:
        $ref: '#/definitions/SeldonScaledObjectSpec'
      metadata:
        $ref: '#/definitions/ObjectMeta'
      pdbSpec:
        $ref: '#/definitions/SeldonPdbSpec'
      replicas:
        format: int32
        type: integer
      spec:
        $ref: '#/definitions/PodSpec'
    type: object
  SeldonScaledObjectSpec:
    description: SeldonScaledObjectSpec is the spec for a KEDA ScaledObject resource
    properties:
      advanced:
        $ref: '#/definitions/AdvancedConfig'
      cooldownPeriod:
        description: +optional
        format: int32
        type: integer
      fallback:
        $ref: '#/definitions/Fallback'
      idleReplicaCount:
        description: +optional
        format: int32
        type: integer
      maxReplicaCount:
        description: +optional
        format: int32
        type: integer
      minReplicaCount:
        description: +optional
        format: int32
        type: integer
      pollingInterval:
        description: +optional
        format: int32
        type: integer
      triggers:
        items:
          $ref: '#/definitions/ScaleTriggers'
        type: array
    type: object
  ServerType:
    type: string
  Service:
    description: |-
      Service is a named abstraction of software service (for example, mysql) consisting of local port
      (for example 3306) that the proxy listens on, and the selector that determines which pods
      will answer requests sent through the proxy.
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: http://kubernetes.io/docs/user-guide/annotations
          +optional
        type: object
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      clusterName:
        description: |-
          The name of the cluster which the object belongs to.
          This is used to distinguish resources with same name and namespace in different clusters.
          This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
          +optional
        type: string
      creationTimestamp:
        $ref: '#/definitions/Time'
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        format: int64
        type: integer
      deletionTimestamp:
        $ref: '#/definitions/Time'
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
        items:
          type: string
        type: array
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will
          NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
          ServerTimeout indicating a unique name could not be found in the time allotted, and the client
          should retry (optionally after the time indicated in the Retry-After header).

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
        type: string
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        format: int64
        type: integer
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: http://kubernetes.io/docs/user-guide/labels
          +optional
        type: object
      managedFields:
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
        items:
          $ref: '#/definitions/ManagedFieldsEntry'
        type: array
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
          +optional
        type: string
      namespace:
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/namespaces
          +optional
        type: string
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
        items:
          $ref: '#/definitions/OwnerReference'
        type: array
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          SelfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
      spec:
        $ref: '#/definitions/ServiceSpec'
      status:
        $ref: '#/definitions/ServiceStatus'
      uid:
        $ref: '#/definitions/UID'
    type: object
  ServiceAccountTokenProjection:
    description: |-
      ServiceAccountTokenProjection represents a projected service account token
      volume. This projection can be used to insert a service account token into
      the pods runtime filesystem for use against APIs (Kubernetes API Server or
      otherwise).
    properties:
      audience:
        description: |-
          Audience is the intended audience of the token. A recipient of a token
          must identify itself with an identifier specified in the audience of the
          token, and otherwise should reject the token. The audience defaults to the
          identifier of the apiserver.
          +optional
        type: string
      expirationSeconds:
        description: |-
          ExpirationSeconds is the requested duration of validity of the service
          account token. As the token approaches expiration, the kubelet volume
          plugin will proactively rotate the service account token. The kubelet will
          start trying to rotate the token if the token is older than 80 percent of
          its time to live or if the token is older than 24 hours.Defaults to 1 hour
          and must be at least 10 minutes.
          +optional
        format: int64
        type: integer
      path:
        description: |-
          Path is the path relative to the mount point of the file to project the
          token into.
        type: string
    type: object
  ServiceAffinity:
    description: Session Affinity Type string
    type: string
  ServiceExternalTrafficPolicyType:
    description: Service External Traffic Policy Type string
    type: string
  ServiceList:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      continue:
        description: |-
          continue may be set if the user set a limit on the number of items returned, and indicates that
          the server has more data available. The value is opaque and may be used to issue another request
          to the endpoint that served this list to retrieve the next set of available objects. Continuing a
          consistent list may not be possible if the server configuration has changed or more than a few
          minutes have passed. The resourceVersion field returned when using this continue value will be
          identical to the value in the first response, unless you have received this token from an error
          message.
        type: string
      items:
        description: List of services
        items:
          $ref: '#/definitions/Service'
        type: array
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      remainingItemCount:
        description: |-
          remainingItemCount is the number of subsequent items in the list which are not included in this
          list response. If the list request contained label or field selectors, then the number of
          remaining items is unknown and the field will be left unset and omitted during serialization.
          If the list is complete (either because it is not chunking or because this is the last chunk),
          then there are no more remaining items and this field will be left unset and omitted during
          serialization.
          Servers older than v1.15 do not set this field.
          The intended use of the remainingItemCount is *estimating* the size of a collection. Clients
          should not rely on the remainingItemCount to be set or to be exact.
          +optional
        format: int64
        type: integer
      resourceVersion:
        description: |-
          String that identifies the server's internal version of this object that
          can be used by clients to determine when objects have changed.
          Value must be treated as opaque by clients and passed unmodified back to the server.
          Populated by the system.
          Read-only.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          selfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
    title: ServiceList holds a list of services.
    type: object
  ServicePort:
    properties:
      appProtocol:
        description: |-
          The application protocol for this port.
          This field follows standard Kubernetes label syntax.
          Un-prefixed names are reserved for IANA standard service names (as per
          RFC-6335 and http://www.iana.org/assignments/service-names).
          Non-standard protocols should use prefixed names such as
          mycompany.com/my-custom-protocol.
          This is a beta field that is guarded by the ServiceAppProtocol feature
          gate and enabled by default.
          +optional
        type: string
      name:
        description: |-
          The name of this port within the service. This must be a DNS_LABEL.
          All ports within a ServiceSpec must have unique names. When considering
          the endpoints for a Service, this must match the 'name' field in the
          EndpointPort.
          Optional if only one ServicePort is defined on this service.
          +optional
        type: string
      nodePort:
        description: |-
          The port on each node on which this service is exposed when type=NodePort or LoadBalancer.
          Usually assigned by the system. If specified, it will be allocated to the service
          if unused or else creation of the service will fail.
          Default is to auto-allocate a port if the ServiceType of this Service requires one.
          More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
          +optional
        format: int32
        type: integer
      port:
        description: The port that will be exposed by this service.
        format: int32
        type: integer
      protocol:
        $ref: '#/definitions/Protocol'
      targetPort:
        $ref: '#/definitions/IntOrString'
    title: ServicePort contains information on service's port.
    type: object
  ServiceSpec:
    properties:
      clusterIP:
        description: |-
          clusterIP is the IP address of the service and is usually assigned
          randomly by the master. If an address is specified manually and is not in
          use by others, it will be allocated to the service; otherwise, creation
          of the service will fail. This field can not be changed through updates.
          Valid values are "None", empty string (""), or a valid IP address. "None"
          can be specified for headless services when proxying is not required.
          Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if
          type is ExternalName.
          More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
          +optional
        type: string
      externalIPs:
        description: |-
          externalIPs is a list of IP addresses for which nodes in the cluster
          will also accept traffic for this service.  These IPs are not managed by
          Kubernetes.  The user is responsible for ensuring that traffic arrives
          at a node with this IP.  A common example is external load-balancers
          that are not part of the Kubernetes system.
          +optional
        items:
          type: string
        type: array
      externalName:
        description: |-
          externalName is the external reference that kubedns or equivalent will
          return as a CNAME record for this service. No proxying will be involved.
          Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123)
          and requires Type to be ExternalName.
          +optional
        type: string
      externalTrafficPolicy:
        $ref: '#/definitions/ServiceExternalTrafficPolicyType'
      healthCheckNodePort:
        description: |-
          healthCheckNodePort specifies the healthcheck nodePort for the service.
          If not specified, HealthCheckNodePort is created by the service api
          backend with the allocated nodePort. Will use user-specified nodePort value
          if specified by the client. Only effects when Type is set to LoadBalancer
          and ExternalTrafficPolicy is set to Local.
          +optional
        format: int32
        type: integer
      ipFamily:
        $ref: '#/definitions/IPFamily'
      loadBalancerIP:
        description: |-
          Only applies to Service Type: LoadBalancer
          LoadBalancer will get created with the IP specified in this field.
          This feature depends on whether the underlying cloud-provider supports specifying
          the loadBalancerIP when a load balancer is created.
          This field will be ignored if the cloud-provider does not support the feature.
          +optional
        type: string
      loadBalancerSourceRanges:
        description: |-
          If specified and supported by the platform, this will restrict traffic through the cloud-provider
          load-balancer will be restricted to the specified client IPs. This field will be ignored if the
          cloud-provider does not support the feature."
          More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
          +optional
        items:
          type: string
        type: array
      ports:
        description: |-
          The list of ports that are exposed by this service.
          More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
          +patchMergeKey=port
          +patchStrategy=merge
          +listType=map
          +listMapKey=port
          +listMapKey=protocol
        items:
          $ref: '#/definitions/ServicePort'
        type: array
      publishNotReadyAddresses:
        description: |-
          publishNotReadyAddresses indicates that any agent which deals with endpoints for this
          Service should disregard any indications of ready/not-ready.
          The primary use case for setting this field is for a StatefulSet's Headless Service to
          propagate SRV DNS records for its Pods for the purpose of peer discovery.
          The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
          Services interpret this to mean that all endpoints are considered "ready" even if the
          Pods themselves are not. Agents which consume only Kubernetes generated endpoints
          through the Endpoints or EndpointSlice resources can safely assume this behavior.
          +optional
        type: boolean
      selector:
        additionalProperties:
          type: string
        description: |-
          Route service traffic to pods with label keys and values matching this
          selector. If empty or not present, the service is assumed to have an
          external process managing its endpoints, which Kubernetes will not
          modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
          Ignored if type is ExternalName.
          More info: https://kubernetes.io/docs/concepts/services-networking/service/
          +optional
        type: object
      sessionAffinity:
        $ref: '#/definitions/ServiceAffinity'
      sessionAffinityConfig:
        $ref: '#/definitions/SessionAffinityConfig'
      topologyKeys:
        description: |-
          topologyKeys is a preference-order list of topology keys which
          implementations of services should use to preferentially sort endpoints
          when accessing this Service, it can not be used at the same time as
          externalTrafficPolicy=Local.
          Topology keys must be valid label keys and at most 16 keys may be specified.
          Endpoints are chosen based on the first topology key with available backends.
          If this field is specified and all entries have no backends that match
          the topology of the client, the service has no backends for that client
          and connections should fail.
          The special value "*" may be used to mean "any topology". This catch-all
          value, if used, only makes sense as the last value in the list.
          If this is not specified or empty, no topology constraints will be applied.
          +optional
        items:
          type: string
        type: array
      type:
        $ref: '#/definitions/ServiceType'
    title: ServiceSpec describes the attributes that a user creates on a service.
    type: object
  ServiceStatus:
    properties:
      explainerFor:
        type: string
      grpcEndpoint:
        type: string
      httpEndpoint:
        type: string
      svcName:
        type: string
    type: object
  ServiceType:
    description: Service Type string describes ingress methods for a service
    type: string
  SessionAffinityConfig:
    properties:
      clientIP:
        $ref: '#/definitions/ClientIPConfig'
    title: SessionAffinityConfig represents the configurations of session affinity.
    type: object
  StatusState:
    type: string
  StorageMedium:
    title: StorageMedium defines ways that storage can be allocated to a volume.
    type: string
  StorageOSVolumeSource:
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          +optional
        type: string
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
      volumeName:
        description: |-
          VolumeName is the human-readable name of the StorageOS volume.  Volume
          names are only unique within a namespace.
        type: string
      volumeNamespace:
        description: |-
          VolumeNamespace specifies the scope of the volume within StorageOS.  If no
          namespace is specified then the Pod's namespace will be used.  This allows the
          Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
          Set VolumeName to any name to override the default behaviour.
          Set to "default" if you are not using namespaces within StorageOS.
          Namespaces that do not pre-exist within StorageOS will be created.
          +optional
        type: string
    title: Represents a StorageOS persistent volume resource.
    type: object
  SvcOrchSpec:
    properties:
      env:
        items:
          $ref: '#/definitions/EnvVar'
        type: array
      replicas:
        format: int32
        type: integer
      resources:
        $ref: '#/definitions/ResourceRequirements'
    type: object
  Sysctl:
    description: Sysctl defines a kernel parameter to be set
    properties:
      name:
        description: Name of a property to set
        type: string
      value:
        description: Value of a property to set
        type: string
    type: object
  TCPSocketAction:
    description: TCPSocketAction describes an action based on opening a socket
    properties:
      host:
        description: |-
          Optional: Host name to connect to, defaults to the pod IP.
          +optional
        type: string
      port:
        $ref: '#/definitions/IntOrString'
    type: object
  TaintEffect:
    type: string
  TerminationMessagePolicy:
    title: TerminationMessagePolicy describes how termination messages are retrieved from a container.
    type: string
  Time:
    description: |-
      +protobuf.options.marshal=false
      +protobuf.as=Timestamp
      +protobuf.options.(gogoproto.goproto_stringer)=false
    title: |-
      Time is a wrapper around time.Time which supports correct
      marshaling to YAML and JSON.  Wrappers are provided for many
      of the factory methods that the time package offers.
    type: object
  Toleration:
    description: |-
      The pod this Toleration is attached to tolerates any taint that matches
      the triple <key,value,effect> using the matching operator <operator>.
    properties:
      effect:
        $ref: '#/definitions/TaintEffect'
      key:
        description: |-
          Key is the taint key that the toleration applies to. Empty means match all taint keys.
          If the key is empty, operator must be Exists; this combination means to match all values and all keys.
          +optional
        type: string
      operator:
        $ref: '#/definitions/TolerationOperator'
      tolerationSeconds:
        description: |-
          TolerationSeconds represents the period of time the toleration (which must be
          of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
          it is not set, which means tolerate the taint forever (do not evict). Zero and
          negative values will be treated as 0 (evict immediately) by the system.
          +optional
        format: int64
        type: integer
      value:
        description: |-
          Value is the taint value the toleration matches to.
          If the operator is Exists, the value should be empty, otherwise just a regular string.
          +optional
        type: string
    type: object
  TolerationOperator:
    title: A toleration operator is the set of operators that can be used in a toleration.
    type: string
  TopologySpreadConstraint:
    properties:
      labelSelector:
        $ref: '#/definitions/LabelSelector'
      maxSkew:
        description: |-
          MaxSkew describes the degree to which pods may be unevenly distributed.
          When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
          between the number of matching pods in the target topology and the global minimum.
          For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
          labelSelector spread as 1/1/0:
          +-------+-------+-------+
           zone1 | zone2 | zone3 |
          +-------+-------+-------+
             P   |   P   |       |
          +-------+-------+-------+
          if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1;
          scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2)
          violate MaxSkew(1).
          if MaxSkew is 2, incoming pod can be scheduled onto any zone.
          When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
          to topologies that satisfy it.
          It's a required field. Default value is 1 and 0 is not allowed.
        format: int32
        type: integer
      topologyKey:
        description: |-
          TopologyKey is the key of node labels. Nodes that have a label with this key
          and identical values are considered to be in the same topology.
          We consider each <key, value> as a "bucket", and try to put balanced number
          of pods into each bucket.
          It's a required field.
        type: string
      whenUnsatisfiable:
        $ref: '#/definitions/UnsatisfiableConstraintAction'
    title: TopologySpreadConstraint specifies how to spread matching pods among the given topology.
    type: object
  Transport:
    type: string
  Type:
    format: int64
    title: Type represents the stored type of IntOrString.
    type: integer
  TypedLocalObjectReference:
    description: |-
      TypedLocalObjectReference contains enough information to let you locate the
      typed referenced object inside the same namespace.
    properties:
      apiGroup:
        description: |-
          APIGroup is the group for the resource being referenced.
          If APIGroup is not specified, the specified Kind must be in the core API group.
          For any other third-party types, APIGroup is required.
          +optional
        type: string
      kind:
        description: Kind is the type of resource being referenced
        type: string
      name:
        description: Name is the name of resource being referenced
        type: string
    type: object
  UID:
    description: |-
      UID is a type that holds unique ID values, including UUIDs.  Because we
      don't ONLY use UUIDs, this is an alias to string.  Being a type captures
      intent and helps make sure that UIDs and names do not get conflated.
    type: string
  URIScheme:
    description: URIScheme identifies the scheme used for connection to a host for Get actions
    type: string
  UnsatisfiableConstraintAction:
    type: string
  UserInfo:
    properties:
      Email:
        type: string
      Groups:
        items:
          type: string
        type: array
      Id:
        type: string
      Name:
        type: string
    type: object
  VersionInfo:
    properties:
      BuildTime:
        type: string
      BuildVersion:
        type: string
      GitBranch:
        type: string
      GitCommit:
        type: string
      GitStatus:
        type: string
      ReleaseType:
        type: string
    type: object
  Volume:
    properties:
      awsElasticBlockStore:
        $ref: '#/definitions/AWSElasticBlockStoreVolumeSource'
      azureDisk:
        $ref: '#/definitions/AzureDiskVolumeSource'
      azureFile:
        $ref: '#/definitions/AzureFileVolumeSource'
      cephfs:
        $ref: '#/definitions/CephFSVolumeSource'
      cinder:
        $ref: '#/definitions/CinderVolumeSource'
      configMap:
        $ref: '#/definitions/ConfigMapVolumeSource'
      csi:
        $ref: '#/definitions/CSIVolumeSource'
      downwardAPI:
        $ref: '#/definitions/DownwardAPIVolumeSource'
      emptyDir:
        $ref: '#/definitions/EmptyDirVolumeSource'
      ephemeral:
        $ref: '#/definitions/EphemeralVolumeSource'
      fc:
        $ref: '#/definitions/FCVolumeSource'
      flexVolume:
        $ref: '#/definitions/FlexVolumeSource'
      flocker:
        $ref: '#/definitions/FlockerVolumeSource'
      gcePersistentDisk:
        $ref: '#/definitions/GCEPersistentDiskVolumeSource'
      gitRepo:
        $ref: '#/definitions/GitRepoVolumeSource'
      glusterfs:
        $ref: '#/definitions/GlusterfsVolumeSource'
      hostPath:
        $ref: '#/definitions/HostPathVolumeSource'
      iscsi:
        $ref: '#/definitions/ISCSIVolumeSource'
      name:
        description: |-
          Volume's name.
          Must be a DNS_LABEL and unique within the pod.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
      nfs:
        $ref: '#/definitions/NFSVolumeSource'
      persistentVolumeClaim:
        $ref: '#/definitions/PersistentVolumeClaimVolumeSource'
      photonPersistentDisk:
        $ref: '#/definitions/PhotonPersistentDiskVolumeSource'
      portworxVolume:
        $ref: '#/definitions/PortworxVolumeSource'
      projected:
        $ref: '#/definitions/ProjectedVolumeSource'
      quobyte:
        $ref: '#/definitions/QuobyteVolumeSource'
      rbd:
        $ref: '#/definitions/RBDVolumeSource'
      scaleIO:
        $ref: '#/definitions/ScaleIOVolumeSource'
      secret:
        $ref: '#/definitions/SecretVolumeSource'
      storageos:
        $ref: '#/definitions/StorageOSVolumeSource'
      vsphereVolume:
        $ref: '#/definitions/VsphereVirtualDiskVolumeSource'
    title: Volume represents a named volume in a pod that may be accessed by any container in the pod.
    type: object
  VolumeDevice:
    properties:
      devicePath:
        description: devicePath is the path inside of the container that the device will be mapped to.
        type: string
      name:
        description: name must match the name of a persistentVolumeClaim in the pod
        type: string
    title: volumeDevice describes a mapping of a raw block device within a container.
    type: object
  VolumeMount:
    properties:
      mountPath:
        description: |-
          Path within the container at which the volume should be mounted.  Must
          not contain ':'.
        type: string
      mountPropagation:
        $ref: '#/definitions/MountPropagationMode'
      name:
        description: This must match the Name of a Volume.
        type: string
      readOnly:
        description: |-
          Mounted read-only if true, read-write otherwise (false or unspecified).
          Defaults to false.
          +optional
        type: boolean
      subPath:
        description: |-
          Path within the volume from which the container's volume should be mounted.
          Defaults to "" (volume's root).
          +optional
        type: string
      subPathExpr:
        description: |-
          Expanded path within the volume from which the container's volume should be mounted.
          Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
          Defaults to "" (volume's root).
          SubPathExpr and SubPath are mutually exclusive.
          +optional
        type: string
    title: VolumeMount describes a mounting of a Volume within a container.
    type: object
  VolumeProjection:
    description: Projection that may be projected along with other supported volume types
    properties:
      configMap:
        $ref: '#/definitions/ConfigMapProjection'
      downwardAPI:
        $ref: '#/definitions/DownwardAPIProjection'
      secret:
        $ref: '#/definitions/SecretProjection'
      serviceAccountToken:
        $ref: '#/definitions/ServiceAccountTokenProjection'
    type: object
  VsphereVirtualDiskVolumeSource:
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          +optional
        type: string
      storagePolicyID:
        description: |-
          Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
          +optional
        type: string
      storagePolicyName:
        description: |-
          Storage Policy Based Management (SPBM) profile name.
          +optional
        type: string
      volumePath:
        description: Path that identifies vSphere volume vmdk
        type: string
    title: Represents a vSphere volume resource.
    type: object
  WeightedPodAffinityTerm:
    description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
    properties:
      podAffinityTerm:
        $ref: '#/definitions/PodAffinityTerm'
      weight:
        description: |-
          weight associated with matching the corresponding podAffinityTerm,
          in the range 1-100.
        format: int32
        type: integer
    type: object
  WindowsSecurityContextOptions:
    properties:
      gmsaCredentialSpec:
        description: |-
          GMSACredentialSpec is where the GMSA admission webhook
          (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
          GMSA credential spec named by the GMSACredentialSpecName field.
          +optional
        type: string
      gmsaCredentialSpecName:
        description: |-
          GMSACredentialSpecName is the name of the GMSA credential spec to use.
          +optional
        type: string
      runAsUserName:
        description: |-
          The UserName in Windows to run the entrypoint of the container process.
          Defaults to the user specified in image metadata if unspecified.
          May also be set in PodSecurityContext. If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        type: string
    title: WindowsSecurityContextOptions contain Windows-specific options and credentials.
    type: object
  protobufAny:
    type: object
    properties:
      typeUrl:
        type: string
      value:
        type: string
        format: byte
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          $ref: '#/definitions/protobufAny'
  v1ArtifactType:
    type: string
    enum:
      - UNKNOWN
      - CUSTOM
      - TENSORFLOW
      - SKLEARN
      - XGBOOST
      - MLFLOW
      - PYTORCH
      - ONNX
      - TENSORRT
      - ALIBI_EXPLAIN
      - ALIBI_DETECT
    default: UNKNOWN
  v1DataType:
    type: string
    enum:
      - FLOAT
      - INT
      - BOOL
      - STRING
      - BYTES
    default: FLOAT
  v1DefaultProtocol:
    type: string
    enum:
      - PROTOCOL_UNKNOWN
      - PROTOCOL_SELDON
      - PROTOCOL_TENSERFLOW
      - PROTOCOL_V2
    default: PROTOCOL_UNKNOWN
  v1DeploymentStatus:
    type: string
    enum:
      - Running
      - Stopped
      - Unknown
    default: Running
  v1DeploymentType:
    type: string
    enum:
      - UndefinedDeploymentType
      - SeldonDeployment
      - SeldonModel
      - KnativeDetector
    default: UndefinedDeploymentType
  v1FeatureCategorySchema:
    type: object
    properties:
      name:
        type: string
        required:
          - name
      dataType:
        $ref: '#/definitions/v1DataType'
    required:
      - name
  v1FeatureSchema:
    type: object
    properties:
      name:
        type: string
        required:
          - name
      type:
        $ref: '#/definitions/v1FeatureType'
      dataType:
        $ref: '#/definitions/v1DataType'
      nCategories:
        type: string
        format: int64
      categoryMap:
        type: object
        additionalProperties:
          type: string
      schema:
        type: array
        items:
          $ref: '#/definitions/v1FeatureCategorySchema'
      shape:
        type: array
        items:
          type: string
          format: int64
    required:
      - name
  v1FeatureType:
    type: string
    enum:
      - REAL
      - CATEGORICAL
      - PROBA
      - ONE_HOT
      - TEXT
      - TENSOR
    default: REAL
  v1Model:
    type: object
    properties:
      URI:
        type: string
        example: gs://seldon-models/sklearn/iris
        description: The URI for the storage bucket containing the model, or the URI to the docker image for custom models. It must be a valid URI as defined in RFC 3986, and must not exceed 200 characters.
        required:
          - URI
      name:
        type: string
        example: Iris Classifier
        description: The name of the model. It must not exceed 200 characters.
      version:
        type: string
        example: v1.2.3
        default: '"v0.0.1"'
        description: The version of the model. It must not exceed 50 characters.
      artifactType:
        $ref: '#/definitions/v1ArtifactType'
        example: SKLEARN
        description: The artifact type of the model. This is the library used to develop the model.
      taskType:
        type: string
        example: classification
        description: The task type of the model. It must not exceed 50 characters.
      tags:
        type: object
        example:
          author: Jon
        additionalProperties:
          type: string
        description: Key-value pairs of arbitrary metadata associated with the model. Each key and value must not exceed 100 and 500 characters respectively.
      metrics:
        type: object
        example:
          trainingPrecision: 0.78
          trainingRecall: 0.87
        additionalProperties:
          type: number
          format: double
        description: Key-value pairs of static metrics associated with the model. For dynamic metrics look into metrics https://deploy.seldon.io/en/latest/contents/getting-started/production-installation/metrics.html. Keys must not exceed 100 characters.
      creationTime:
        type: string
        format: date-time
        example: "2017-01-15T01:30:15.01Z"
        description: The creation timestamp for the model metadata entry. It is automatically created by the Metadata service and cannot be modified. The timestamp is using the [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format/
      predictionSchema:
        $ref: '#/definitions/v1PredictionSchema'
        example:
          requests:
            - name: Input Image
              type: MATRIX
              data_type: FLOAT
              shape:
                - 32
                - 32
                - 3
          responses:
            - name: Image Class
              type: CATEGORICAL
              data_type: INT32
              n_categories: 10
              category_map:
                "0": Airplane
                "1": Automobile
                "2": Bird
                "3": Cat
                "4": Deer
                "5": Dog
                "6": Frog
                "7": Horse
                "8": Ship
                "9": Truck
        description: The schema defining the inputs/outputs for the given model.
      project:
        type: string
        example: project_1
        description: The project that this model belongs to.
      runtimeDefaults:
        $ref: '#/definitions/v1RuntimeDefaults'
        description: Default values used when deploying this model.
    required:
      - URI
  v1ModelMetadataCreateResponse:
    type: object
  v1ModelMetadataDeleteResponse:
    type: object
  v1ModelMetadataListResponse:
    type: object
    properties:
      models:
        type: array
        items:
          $ref: '#/definitions/v1Model'
      nextPageToken:
        type: string
        description: |-
          A pagination token returned from a previous call to `List`
          that indicates from where listing should continue.
  v1ModelMetadataUpdateResponse:
    type: object
  v1PredictionSchema:
    type: object
    properties:
      requests:
        type: array
        items:
          $ref: '#/definitions/v1FeatureSchema'
        required:
          - requests
      responses:
        type: array
        items:
          $ref: '#/definitions/v1FeatureSchema'
        required:
          - responses
    required:
      - requests
      - responses
  v1RuntimeDefaults:
    type: object
    properties:
      defaultProtocol:
        $ref: '#/definitions/v1DefaultProtocol'
        example: V2
        description: The default protocol used for REST/gRPC requests to the model. It is possible that a model can be used with multiple protocols.
  v1RuntimeMetadata:
    type: object
    properties:
      modelUri:
        type: string
        example: gs://seldon-models/sklearn/iris
        description: The URI for the storage bucket containing the model, or the URI to the docker image for custom models.
      deploymentName:
        type: string
        example: iris
        description: The name of the Kubernetes deployment that is associated with a model.
      deploymentNamespace:
        type: string
        example: seldon
        description: The Kubernetes namespace in which this deployment is running in.
      deploymentKubernetesUid:
        type: string
        example: 2c60bdb0-8a8e-46bf-a3c5-627ad507f76b
        description: The Kubernetes UID of the deployment associated with a model. See https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids for details
      predictorName:
        type: string
        example: default
        description: The name of the predictor inside the deployment that contains the referenced model.
      nodeName:
        type: string
        example: default-node
        description: The name of the node inside the predictor that contains the referenced model. This is relevant and populated only for SeldonDeployment deployment types.
      deploymentStatus:
        $ref: '#/definitions/v1DeploymentStatus'
        description: The status of the Kubernetes deployment associated with a model.
      deploymentType:
        $ref: '#/definitions/v1DeploymentType'
        description: The type of deployment - either SeldonDeployment or Model.
      traffic:
        type: string
        format: int64
        description: The amount of traffic server by this model in the deployment.
      shadow:
        type: boolean
        description: True if this model is a shadow in the deployment.
      creationTime:
        type: string
        format: date-time
        example: "2017-01-15T01:30:15.01Z"
        description: The creation timestamp for the runtime model metadata entry. It is automatically created by the Metadata service and cannot be modified. The timestamp is using the [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format/
      model:
        $ref: '#/definitions/v1Model'
        description: Detailed metadata of the model referenced in this runtime metadata entry.
      explainer:
        type: boolean
        description: True if this model is a explainer in the deployment.
      replicas:
        type: string
        format: int64
        description: The number of replicas for this model.
  v1RuntimeMetadataListResponse:
    type: object
    properties:
      runtimeMetadata:
        type: array
        items:
          $ref: '#/definitions/v1RuntimeMetadata'
      nextPageToken:
        type: string
        description: |-
          A pagination token returned from a previous call to `List`
          that indicates from where listing should continue.
  v1AddUserToGroupResponse:
    type: object
  v1CreateGroupRequest:
    type: object
    properties:
      name:
        type: string
        description: The name of the group to be created.
        required:
          - name
    required:
      - name
  v1CreateGroupResponse:
    type: object
  v1CreatePolicyResponse:
    type: object
  v1CreateUserRequest:
    type: object
    properties:
      username:
        type: string
        description: The username of the user. It must consist of only letters, numbers, underscores, and dashes, and be at most 30 characters. It can be used for login and be part of policies.
        required:
          - username
      email:
        type: string
        description: The email of the user. It must be a valid email. The user will receive instructions for setting credentials on this email.
        required:
          - email
      firstName:
        type: string
      lastName:
        type: string
    required:
      - username
      - email
  v1CreateUserResponse:
    type: object
  v1DeleteGroupResponse:
    type: object
  v1DeletePolicyResponse:
    type: object
  v1DeleteUserFromGroupResponse:
    type: object
  v1DeleteUserResponse:
    type: object
  v1GetGroupMembersResponse:
    type: object
    properties:
      members:
        type: array
        items:
          $ref: '#/definitions/v1User'
  v1GetGroupsResponse:
    type: object
    properties:
      groups:
        type: array
        items:
          $ref: '#/definitions/v1Group'
  v1GetPermissionsResponse:
    type: object
    properties:
      permissions:
        type: array
        items:
          $ref: '#/definitions/v1ResourceActionPair'
  v1GetPolicyTargetsResponse:
    type: object
    properties:
      users:
        type: array
        items:
          type: string
      groups:
        type: array
        items:
          type: string
  v1GetUserGroupsResponse:
    type: object
    properties:
      groups:
        type: array
        items:
          $ref: '#/definitions/v1Group'
  v1GetUsersResponse:
    type: object
    properties:
      users:
        type: array
        items:
          $ref: '#/definitions/v1User'
  v1Group:
    type: object
    properties:
      name:
        type: string
  v1GroupPolicy:
    type: object
    properties:
      group:
        type: string
      permission:
        $ref: '#/definitions/v1ResourceActionPair'
  v1Policy:
    type: object
    properties:
      userGrants:
        type: array
        items:
          $ref: '#/definitions/v1UserPolicy'
      groupGrants:
        type: array
        items:
          $ref: '#/definitions/v1GroupPolicy'
  v1ResetUserPasswordResponse:
    type: object
  v1ResourceActionPair:
    type: object
    properties:
      action:
        type: string
      resource:
        type: string
  v1User:
    type: object
    properties:
      username:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      enabled:
        type: boolean
      emailVerified:
        type: boolean
      creationTime:
        type: string
        format: date-time
  v1UserPolicy:
    type: object
    properties:
      user:
        type: string
      permission:
        $ref: '#/definitions/v1ResourceActionPair'
  v1FiringAlert:
    type: object
    properties:
      name:
        type: string
      severity:
        type: string
      description:
        type: string
      title:
        type: string
      activeAt:
        type: string
        format: date-time
  v1ListAlertsResponse:
    type: object
    properties:
      firingAlerts:
        type: array
        items:
          $ref: '#/definitions/v1FiringAlert'
  v1TriggerTestAlertResponse:
    type: object
  protobufNullValue:
    type: string
    enum:
      - NULL_VALUE
    default: NULL_VALUE
    description: |-
      `NullValue` is a singleton enumeration to represent the null value for the
      `Value` type union.

       The JSON representation for `NullValue` is JSON `null`.

       - NULL_VALUE: Null value.
  v1CreateGCSBucketSecretResponse:
    type: object
  v1CreateRcloneBucketSecretResponse:
    type: object
  v1CreateRegistrySecretResponse:
    type: object
  v1CreateS3BucketSecretResponse:
    type: object
  v1DeleteSecretResponse:
    type: object
  v1ListSecretsResponse:
    type: object
    properties:
      secrets:
        type: array
        items:
          $ref: '#/definitions/v1Secret'
  v1RcloneConfig:
    type: object
    properties:
      variables:
        type: object
        additionalProperties:
          type: string
        description: The rclone key value pairs for your secret, see the documentation for more detail.
  v1S3Credentials:
    type: object
    properties:
      s3AccessKeyId:
        type: string
      s3SecretAccessKey:
        type: string
  v1Secret:
    type: object
    properties:
      secretName:
        type: string
      secretType:
        $ref: '#/definitions/v1SecretType'
  v1SecretType:
    type: string
    enum:
      - all
      - bucket
      - registry
    default: all
    description: 'Note: intentionally lower case so that the URL format accepts lowercase.'
host: X.X.X.X
info:
  description: |-
    API to interact and manage the lifecycle of your machine learning models
    deployed through Seldon Deploy.
  title: Seldon Deploy API
  version: v1alpha1
paths:
  /applicationlogs:
    post:
      operationId: ReadApplicationLogs
      parameters:
        - description: ApplicationLogs
          in: body
          name: Body
          required: true
          schema:
            $ref: '#/definitions/ApplicationLogsParams'
      responses:
        "200":
          $ref: '#/responses/ApplicationLogsResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      summary: Read application container logs from elastic search.
      tags:
        - ApplicationLogs
  /cluster:
    get:
      description: Read the cluster info
      operationId: ReadCluster
      responses:
        "200":
          $ref: '#/responses/ClusterInfoResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Environment
  /healthcheck:
    get:
      description: Read the healthcheck
      operationId: ReadHealthCheck
      responses:
        "200":
          $ref: '#/responses/HealthCheckResponse'
      tags:
        - Environment
  /namespaces/{namespace}/gitops-status:
    get:
      description: Read the GitOps status
      operationId: ReadGitOpsStatus
      parameters:
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/GenericResponse'
      tags:
        - GitOps
  /namespaces/{namespace}/models:
    post:
      description: Create a Seldon Pipeline
      operationId: CreateModel
      parameters:
        - description: Action
          in: query
          name: action
          type: string
        - description: Message
          in: query
          name: message
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Seldon Model
          in: body
          name: model
          required: true
          schema:
            $ref: '#/definitions/Model'
      responses:
        "200":
          $ref: '#/responses/SeldonModelResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "403":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Models
  /namespaces/{namespace}/models/{name}:
    delete:
      description: Delete the specified Seldon Model
      operationId: DeleteModel
      parameters:
        - description: Action
          in: query
          name: action
          type: string
        - description: Message
          in: query
          name: message
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/GenericResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "403":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Models
    get:
      description: Read the specified Seldon Model
      operationId: ReadModel
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/SeldonModelResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Models
    put:
      description: Update the specified Seldon Model
      operationId: UpdateModel
      parameters:
        - description: Action
          in: query
          name: action
          type: string
        - description: Message
          in: query
          name: message
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Seldon Model
          in: body
          name: model
          required: true
          schema:
            $ref: '#/definitions/Model'
      responses:
        "200":
          $ref: '#/responses/SeldonModelResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "403":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Models
  /namespaces/{namespace}/pipelines:
    get:
      description: list objects of kind Seldon Pipelines
      operationId: ListPipelines
      parameters:
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/SeldonPipelineListResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "404":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Pipelines
    post:
      description: Create a Seldon Pipeline
      operationId: CreatePipeline
      parameters:
        - description: Action
          in: query
          name: action
          type: string
        - description: Message
          in: query
          name: message
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Seldon Pipeline
          in: body
          name: mldeployment
          required: true
          schema:
            $ref: '#/definitions/Pipeline'
      responses:
        "200":
          $ref: '#/responses/SeldonPipelineResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "403":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Pipelines
  /namespaces/{namespace}/pipelines/{name}:
    delete:
      description: Delete the specified Seldon Pipeline
      operationId: DeletePipeline
      parameters:
        - description: Action
          in: query
          name: action
          type: string
        - description: Message
          in: query
          name: message
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/GenericResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "403":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Pipelines
    get:
      description: Read the specified Seldon Pipeline
      operationId: ReadPipeline
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/SeldonPipelineResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Pipelines
    put:
      description: Update the specified Seldon Pipeline
      operationId: UpdatePipeline
      parameters:
        - description: Action
          in: query
          name: action
          type: string
        - description: Message
          in: query
          name: message
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Seldon Pipeline
          in: body
          name: mldeployment
          required: true
          schema:
            $ref: '#/definitions/Pipeline'
      responses:
        "200":
          $ref: '#/responses/SeldonPipelineResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "403":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Pipelines
  /namespaces/{namespace}/pipelines/{name}/batchjobs:
    get:
      description: Read the pipeline batch jobs
      operationId: ListPipelineBatchJobs
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Limit of items returned in one response
          in: query
          name: limit
          type: string
        - description: Requested page
          in: query
          name: Page
          type: string
      responses:
        "200":
          $ref: '#/responses/BatchJobsListResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - BatchJobs
    post:
      description: Create the pipeline batch jobs
      operationId: CreatePipelineBatchJob
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: WorkflowName
          in: body
          name: workflow
          required: true
          schema:
            $ref: '#/definitions/BatchJobDefinition'
      responses:
        "200":
          $ref: '#/responses/BatchJobPostResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - BatchJobs
  /namespaces/{namespace}/pipelines/{name}/batchjobs/{jobName}:
    get:
      description: Get details on the pipeline batch job
      operationId: GetPipelineBatchJob
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: JobName identifies a job name
          in: path
          name: jobName
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/BatchJobGetResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - BatchJobs
  /namespaces/{namespace}/pipelines/{name}/experiment:
    delete:
      description: Delete Seldon Pipeline Experiment Pipelines
      operationId: DeletePipelineExperiment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/GenericResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "404":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Experiments
    get:
      description: Read Seldon Pipeline Experiment
      operationId: GetPipelineExperiment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/SeldonExperimentResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "404":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Experiments
    post:
      description: Create a Seldon Pipeline Experiment
      operationId: CreatePipelineExperiment
      parameters:
        - description: Action
          in: query
          name: action
          type: string
        - description: Message
          in: query
          name: message
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Seldon Experiment
          in: body
          name: experiment
          required: true
          schema:
            $ref: '#/definitions/Experiment'
      responses:
        "200":
          $ref: '#/responses/SeldonExperimentResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "403":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Experiments
    put:
      description: Update the specified Seldon Pipeline Experiment
      operationId: UpdatePipelineExperiment
      parameters:
        - description: Action
          in: query
          name: action
          type: string
        - description: Message
          in: query
          name: message
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Seldon Experiment
          in: body
          name: experiment
          required: true
          schema:
            $ref: '#/definitions/Experiment'
      responses:
        "200":
          $ref: '#/responses/SeldonExperimentResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "403":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Experiments
  /namespaces/{namespace}/pipelines/{name}/experiment/canary:
    delete:
      description: Delete the specified Seldon Pipeline Canary
      operationId: RemoveCanary
      parameters:
        - description: Action
          in: query
          name: action
          type: string
        - description: Message
          in: query
          name: message
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/GenericResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "403":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Experiments
    put:
      description: Promote the specified Seldon Pipeline Canary
      operationId: PromoteCanary
      parameters:
        - description: Action
          in: query
          name: action
          type: string
        - description: Message
          in: query
          name: message
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/GenericResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "403":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Experiments
  /namespaces/{namespace}/pipelines/{name}/explain:
    post:
      description: Create Seldon Pipeline explanation
      operationId: ExplainSeldonPipeline
      parameters:
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Prediction contains predict payload
          in: body
          name: explaindata
          schema:
            type: object
      responses:
        "200":
          $ref: '#/responses/GenericResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Explain
  /namespaces/{namespace}/pipelines/{name}/explainer:
    delete:
      description: Read the specified Seldon Pipeline Explainer
      operationId: DeletePipelineExplainer
      parameters:
        - description: Action
          in: query
          name: action
          type: string
        - description: Message
          in: query
          name: message
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/GenericResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Pipelines
    get:
      description: Read the specified Seldon Pipeline Explainer
      operationId: ReadPipelineExplainer
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/SeldonModelResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Pipelines
    post:
      description: Read the specified Seldon Pipeline Explainer
      operationId: CreatePipelineExplainer
      parameters:
        - description: Action
          in: query
          name: action
          type: string
        - description: Message
          in: query
          name: message
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Seldon Model
          in: body
          name: model
          required: true
          schema:
            $ref: '#/definitions/Model'
      responses:
        "200":
          $ref: '#/responses/SeldonModelResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Pipelines
  /namespaces/{namespace}/pipelines/{name}/loadtestjobs:
    get:
      description: List Pipeline load test jobs
      operationId: ListLoadtestPipeline
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/MessageResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - LoadtestJobs
    post:
      description: |-
        Create Pipeline load test
        multipart/form-data
      operationId: CreateLoadtestPipeline
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Prediction contains predict payload
          in: formData
          name: loadFile
          required: true
          type: file
        - description: Connections Number provides number of allowed connections
          in: formData
          name: connectionsNumber
          type: string
        - description: Requests Number provides number of allowed requests
          in: formData
          name: requestsNumber
          type: string
        - description: Duration of load test in seconds
          in: formData
          name: duration
          type: string
      responses:
        "200":
          $ref: '#/responses/MessageResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - LoadtestJobs
  /namespaces/{namespace}/pipelines/{name}/loadtestjobs/{jobName}:
    delete:
      description: Delete Pipeline load test jobs
      operationId: DeleteLoadtestPipeline
      parameters:
        - description: JobName identifies a job name
          in: path
          name: jobName
          required: true
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/MessageResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - LoadtestJobs
  /namespaces/{namespace}/pipelines/{name}/models:
    get:
      description: List objects of kind Seldon Models within a Pipeline
      operationId: ListPipelineModels
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/SeldonModelListResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "404":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Pipelines
  /namespaces/{namespace}/pipelines/{name}/monitor/drift-detector:
    get:
      description: List the specified Seldon Pipeline Drift Detector
      operationId: ListDriftDetectorSeldonPipeline
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/DetectorListResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - DriftDetector
    post:
      description: Create the specified Seldon Pipeline Drift Detector
      operationId: CreateDriftDetectorSeldonPipeline
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Deployment Detector Data
          in: body
          name: detectorData
          required: true
          schema:
            $ref: '#/definitions/DetectorConfigData'
      responses:
        "200":
          $ref: '#/responses/DetectorResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - DriftDetector
  /namespaces/{namespace}/pipelines/{name}/monitor/drift-detector/{detectorName}:
    delete:
      description: Read the specified Seldon Pipeline Drift Detector
      operationId: DeleteDriftDetectorSeldonPipeline
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Detector Name
          in: path
          name: detectorName
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/MessageResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - DriftDetector
    get:
      description: Read the specified Seldon Pipeline Drift Detector
      operationId: ReadDriftDetectorSeldonPipeline
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Detector Name
          in: path
          name: detectorName
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/DetectorResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - DriftDetector
  /namespaces/{namespace}/pipelines/{name}/monitor/featuredistributions:
    post:
      description: Get the specified Seldon Deployment predictions feature distribution
      operationId: SeldonPipelineFeatureDistributions
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Deployment Feature Data
          in: body
          name: featureData
          required: true
          schema:
            $ref: '#/definitions/DeploymentFeatureData'
      responses:
        "200":
          $ref: '#/responses/FeatureDistResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Monitor
  /namespaces/{namespace}/pipelines/{name}/monitor/featurestatistics:
    post:
      description: Get the specified Seldon Deployment predictions feature statistics
      operationId: SeldonPipelineFeatureStatistics
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Deployment Feature Data
          in: body
          name: featureData
          required: true
          schema:
            $ref: '#/definitions/DeploymentFeatureData'
      responses:
        "200":
          $ref: '#/responses/FeatureStatResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Monitor
  /namespaces/{namespace}/pipelines/{name}/monitor/outlier-detector:
    get:
      description: List the specified Seldon Pipeline Outlier Detector
      operationId: ListOutlierDetectorSeldonPipeline
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/DetectorListResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - OutlierDetector
    post:
      description: Create the specified Seldon Pipeline Outlier Detector
      operationId: CreateOutlierDetectorSeldonPipeline
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Deployment Detector Data
          in: body
          name: detectorData
          required: true
          schema:
            $ref: '#/definitions/DetectorConfigData'
      responses:
        "200":
          $ref: '#/responses/DetectorResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - OutlierDetector
  /namespaces/{namespace}/pipelines/{name}/monitor/outlier-detector/{detectorName}:
    delete:
      description: Read the specified Seldon Pipeline Outlier Detector
      operationId: DeleteOutlierDetectorSeldonPipeline
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Detector Name
          in: path
          name: detectorName
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/MessageResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - OutlierDetector
    get:
      description: Read the specified Seldon Pipeline Outlier Detector
      operationId: ReadOutlierDetectorSeldonPipeline
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Detector Name
          in: path
          name: detectorName
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/DetectorResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - OutlierDetector
  /namespaces/{namespace}/pipelines/{name}/predictcurl:
    put:
      description: Read the specified Seldon Pipeline predict curl
      operationId: ReadPredictCurlSeldonPipeline
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Prediction
          in: body
          name: prediction
          required: true
          schema:
            type: object
      responses:
        "200":
          $ref: '#/responses/GenericResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Predict
  /namespaces/{namespace}/pipelines/{name}/predictfile:
    post:
      consumes:
        - multipart/form-data
      description: Create Seldon Pipeline prediction
      operationId: PredictFileSeldonPipeline
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: PredictionFile
          in: formData
          name: predictFile
          required: true
          type: file
      responses:
        "200":
          $ref: '#/responses/GenericResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Predict
  /namespaces/{namespace}/seldondeployments:
    get:
      description: list objects of kind Seldon Deployment
      operationId: ListSeldonDeployments
      parameters:
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/SeldonDeploymentListResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "404":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - SeldonDeployments
    post:
      description: Create a Seldon Deployment
      operationId: CreateSeldonDeployment
      parameters:
        - description: Action
          in: query
          name: action
          type: string
        - description: Message
          in: query
          name: message
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Seldon Deployment
          in: body
          name: mldeployment
          required: true
          schema:
            $ref: '#/definitions/SeldonDeployment'
      responses:
        "200":
          $ref: '#/responses/SeldonDeploymentResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "403":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - SeldonDeployments
  /namespaces/{namespace}/seldondeployments/{name}:
    delete:
      description: Delete the specified Seldon Deployment
      operationId: DeleteSeldonDeployment
      parameters:
        - description: Action
          in: query
          name: action
          type: string
        - description: Message
          in: query
          name: message
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/GenericResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "403":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - SeldonDeployments
    get:
      description: Read the specified Seldon Deployment
      operationId: ReadSeldonDeployment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/SeldonDeploymentResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - SeldonDeployments
    put:
      description: Update the specified Seldon Deployment
      operationId: UpdateSeldonDeployment
      parameters:
        - description: Action
          in: query
          name: action
          type: string
        - description: Message
          in: query
          name: message
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Seldon Deployment
          in: body
          name: mldeployment
          required: true
          schema:
            $ref: '#/definitions/SeldonDeployment'
      responses:
        "200":
          $ref: '#/responses/SeldonDeploymentResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "403":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - SeldonDeployments
  /namespaces/{namespace}/seldondeployments/{name}/batchjobs:
    get:
      description: Read the seldondeployment's batch jobs
      operationId: ListSeldonDeploymentBatchJobs
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Limit of items returned in one response
          in: query
          name: limit
          type: string
        - description: Requested page
          in: query
          name: Page
          type: string
      responses:
        "200":
          $ref: '#/responses/BatchJobsListResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - BatchJobs
    post:
      description: Create the seldondeployment's batch jobs
      operationId: CreateSeldonDeploymentBatchJob
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: WorkflowName
          in: body
          name: workflow
          required: true
          schema:
            $ref: '#/definitions/BatchJobDefinition'
      responses:
        "200":
          $ref: '#/responses/BatchJobPostResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - BatchJobs
  /namespaces/{namespace}/seldondeployments/{name}/batchjobs/{jobName}:
    get:
      description: Get details on the seldondeployment's batch job
      operationId: GetDeploymentBatchJob
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: JobName identifies a job name
          in: path
          name: jobName
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/BatchJobGetResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - BatchJobs
  /namespaces/{namespace}/seldondeployments/{name}/explain:
    post:
      description: Create Seldon Deployment explanation
      operationId: ExplainSeldonDeployment
      parameters:
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Prediction contains predict payload
          in: body
          name: explaindata
          schema:
            type: object
      responses:
        "200":
          $ref: '#/responses/GenericResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Explain
  /namespaces/{namespace}/seldondeployments/{name}/gitdiff:
    get:
      description: Read the git diff
      operationId: ReadSeldonDeploymentGitDiff
      parameters:
        - description: Hash
          in: query
          name: hash
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/GitDiffResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - GitOps
  /namespaces/{namespace}/seldondeployments/{name}/gitlogs:
    get:
      description: Read the git commits
      operationId: ReadSeldonDeploymentGitLogs
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/GitLogsResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - GitOps
  /namespaces/{namespace}/seldondeployments/{name}/gitrestore:
    get:
      description: Restore the git commit
      operationId: SeldonDeploymentGitRestore
      parameters:
        - description: Hash
          in: query
          name: hash
          type: string
        - description: Message
          in: query
          name: message
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/MessageResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - GitOps
  /namespaces/{namespace}/seldondeployments/{name}/gitrevert:
    get:
      description: Revert the git commit
      operationId: SeldonDeploymentGitRevert
      parameters:
        - description: Hash
          in: query
          name: hash
          type: string
        - description: Message
          in: query
          name: message
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/MessageResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - GitOps
  /namespaces/{namespace}/seldondeployments/{name}/loadtestjobs:
    get:
      description: List Seldon Deployment load test jobs
      operationId: ListLoadtestSeldonDeployment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/MessageResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - LoadtestJobs
    post:
      description: |-
        Create Seldon Deployment load test
        multipart/form-data
      operationId: CreateLoadtestSeldonDeployment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Prediction contains predict payload
          in: formData
          name: loadFile
          required: true
          type: file
        - description: Connections Number provides number of allowed connections
          in: formData
          name: connectionsNumber
          type: string
        - description: Requests Number provides number of allowed requests
          in: formData
          name: requestsNumber
          type: string
        - description: Duration of load test in seconds
          in: formData
          name: duration
          type: string
      responses:
        "200":
          $ref: '#/responses/MessageResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - LoadtestJobs
  /namespaces/{namespace}/seldondeployments/{name}/loadtestjobs/{jobName}:
    delete:
      description: Delete Seldon Deployment load test jobs
      operationId: DeleteLoadtestSeldonDeployment
      parameters:
        - description: JobName identifies a job name
          in: path
          name: jobName
          required: true
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/MessageResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - LoadtestJobs
  /namespaces/{namespace}/seldondeployments/{name}/monitor/drift-detector:
    get:
      description: Read the specified Seldon Deployment Drift Detector
      operationId: ListDriftDetectorSeldonDeployment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/DetectorListResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - DriftDetector
    post:
      description: Create the specified Seldon Deployment Drift Detector
      operationId: CreateDriftDetectorSeldonDeployment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Deployment Detector Data
          in: body
          name: detectorData
          required: true
          schema:
            $ref: '#/definitions/DetectorConfigData'
      responses:
        "200":
          $ref: '#/responses/DetectorResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - DriftDetector
  /namespaces/{namespace}/seldondeployments/{name}/monitor/drift-detector/{detectorName}:
    delete:
      description: Read the specified Seldon Deployment Drift Detector
      operationId: DeleteDriftDetectorSeldonDeployment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Detector Name
          in: path
          name: detectorName
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/MessageResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - DriftDetector
    get:
      description: Read the specified Seldon Deployment Drift Detector
      operationId: ReadDriftDetectorSeldonDeployment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Detector Name
          in: path
          name: detectorName
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/DetectorResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - DriftDetector
  /namespaces/{namespace}/seldondeployments/{name}/monitor/featuredistributions:
    post:
      description: Get the specified Seldon Deployment predictions feature distribution
      operationId: SeldonDeploymentFeatureDistributions
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Deployment Feature Data
          in: body
          name: featureData
          required: true
          schema:
            $ref: '#/definitions/DeploymentFeatureData'
      responses:
        "200":
          $ref: '#/responses/FeatureDistResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Monitor
  /namespaces/{namespace}/seldondeployments/{name}/monitor/featurestatistics:
    post:
      description: Get the specified Seldon Deployment predictions feature statistics
      operationId: SeldonDeploymentFeatureStatistics
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Deployment Feature Data
          in: body
          name: featureData
          required: true
          schema:
            $ref: '#/definitions/DeploymentFeatureData'
      responses:
        "200":
          $ref: '#/responses/FeatureStatResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Monitor
  /namespaces/{namespace}/seldondeployments/{name}/monitor/metrics-server:
    get:
      description: Read the specified Seldon Deployment Metrics Server
      operationId: ListMetricsServerSeldonDeployment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/DetectorListResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - MetricsServer
    post:
      description: Create the specified Seldon Deployment Metrics Server
      operationId: CreateMetricsServerSeldonDeployment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Deployment Detector Data
          in: body
          name: detectorData
          required: true
          schema:
            $ref: '#/definitions/DetectorConfigData'
      responses:
        "200":
          $ref: '#/responses/DetectorResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - MetricsServer
  /namespaces/{namespace}/seldondeployments/{name}/monitor/metrics-server/{detectorName}:
    delete:
      description: Read the specified Seldon Deployment Metrics Server
      operationId: DeleteMetricsServerSeldonDeployment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Detector Name
          in: path
          name: detectorName
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/MessageResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - MetricsServer
    get:
      description: Read the specified Seldon Deployment Metrics Server
      operationId: ReadMetricsServerSeldonDeployment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Detector Name
          in: path
          name: detectorName
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/DetectorResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - MetricsServer
  /namespaces/{namespace}/seldondeployments/{name}/monitor/outlier-detector:
    get:
      description: Read the specified Seldon Deployment Outlier Detector
      operationId: ListOutlierDetectorSeldonDeployment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/DetectorListResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - OutlierDetector
    post:
      description: Create the specified Seldon Deployment Outlier Detector
      operationId: CreateOutlierDetectorSeldonDeployment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Deployment Detector Data
          in: body
          name: detectorData
          required: true
          schema:
            $ref: '#/definitions/DetectorConfigData'
      responses:
        "200":
          $ref: '#/responses/DetectorResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - OutlierDetector
  /namespaces/{namespace}/seldondeployments/{name}/monitor/outlier-detector/{detectorName}:
    delete:
      description: Read the specified Seldon Deployment Outlier Detector
      operationId: DeleteOutlierDetectorSeldonDeployment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Detector Name
          in: path
          name: detectorName
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/MessageResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - OutlierDetector
    get:
      description: Read the specified Seldon Deployment Outlier Detector
      operationId: ReadOutlierDetectorSeldonDeployment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Detector Name
          in: path
          name: detectorName
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/DetectorResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - OutlierDetector
  /namespaces/{namespace}/seldondeployments/{name}/predict:
    post:
      description: Create Seldon Deployment prediction
      operationId: PredictSeldonDeployment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Prediction
          in: body
          name: prediction
          required: true
          schema:
            type: object
      responses:
        "200":
          $ref: '#/responses/GenericResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Predict
  /namespaces/{namespace}/seldondeployments/{name}/predictcurl:
    put:
      description: Read the specified Seldon Deployment predict curl
      operationId: ReadPredictCurlSeldonDeployment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Prediction
          in: body
          name: prediction
          required: true
          schema:
            type: object
      responses:
        "200":
          $ref: '#/responses/GenericResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Predict
  /namespaces/{namespace}/seldondeployments/{name}/predictfile:
    post:
      consumes:
        - multipart/form-data
      description: Create Seldon Deployment prediction
      operationId: PredictFileSeldonDeployment
      parameters:
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: PredictionFile
          in: formData
          name: predictFile
          required: true
          type: file
      responses:
        "200":
          $ref: '#/responses/GenericResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - Predict
  /namespaces/{namespace}/seldondeployments/{name}/resources:
    get:
      description: list objects of kind resource for Seldon Deployment
      operationId: ListSeldonDeploymentResources
      parameters:
        - description: Component differentiates between types of model (e.g. predictor, explainer... etc)
          in: query
          name: component
          type: string
        - description: Name identifies a resource
          in: path
          name: name
          required: true
          type: string
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
      responses:
        "200":
          $ref: '#/responses/ResourceListResponse'
        "400":
          $ref: '#/responses/ErrorDefault'
        "405":
          $ref: '#/responses/ErrorDefault'
        "424":
          $ref: '#/responses/ErrorDefault'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - KubernetesResources
  /namespaces/{namespace}/seldondeployments/validate:
    get:
      description: Validate the given Seldon Deployment
      operationId: ValidateSeldonDeployment
      parameters:
        - description: Namespace provides a logical grouping of resources
          in: path
          name: namespace
          required: true
          type: string
        - description: Seldon Deployment
          in: body
          name: mldeployment
          required: true
          schema:
            $ref: '#/definitions/SeldonDeployment'
      responses:
        "200":
          $ref: '#/responses/MessageResponse'
        "500":
          $ref: '#/responses/ErrorDefault'
      tags:
        - SeldonDeployments
  /user:
    get:
      description: Read the request user
      operationId: ReadUser
      responses:
        "200":
          $ref: '#/responses/UserResponse'
      tags:
        - Environment
  /version:
    get:
      description: Read the version
      operationId: ReadVersion
      responses:
        "200":
          $ref: '#/responses/VersionResponse'
      tags:
        - Environment
  /model/metadata:
    get:
      summary: List Model Metadata entries.
      description: 'List takes several parameters that are present in the Model Metadata and tries to list all metadata entries that match all supplied fields. To filter by `tags` or `metrics` you can use a map as a query parameter. For example: `?tags[key]=value`.'
      operationId: ModelMetadataService_ListModelMetadata
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1ModelMetadataListResponse'
        "204":
          description: No Content
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: URI
          in: query
          required: false
          type: string
        - name: name
          in: query
          required: false
          type: string
        - name: version
          in: query
          required: false
          type: string
        - name: artifactType
          in: query
          required: false
          type: string
          enum:
            - UNKNOWN
            - CUSTOM
            - TENSORFLOW
            - SKLEARN
            - XGBOOST
            - MLFLOW
            - PYTORCH
            - ONNX
            - TENSORRT
            - ALIBI_EXPLAIN
            - ALIBI_DETECT
          default: UNKNOWN
        - name: taskType
          in: query
          required: false
          type: string
        - name: modelType
          in: query
          required: false
          type: string
        - name: query
          description: For more complex queries where other logical operators like OR, NOT, etc.
          in: query
          required: false
          type: string
        - name: pageSize
          description: Optional. The maximum number of Folders to return in the response.
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: |-
            Optional. A pagination token returned from a previous call to `List`
            that indicates where this listing should continue from.
          in: query
          required: false
          type: string
        - name: listMask
          description: |-
            Optional. Can be used to specify which fields of Model you wish to return in the response.
            If left empty all fields will be returned.
          in: query
          required: false
          type: string
        - name: project
          in: query
          required: false
          type: string
        - name: orderBy
          description: 'The order in which to return the model metadata. The string value should follow SQL syntax: comma separated list of fields. The default sorting order is ascending. To specify descending order for a field, a suffix " desc" should be appended to the field name. Valid field names include: uri, name, version, project, artifact_type, task_type.'
          in: query
          required: false
          type: string
        - name: defaultProtocol
          in: query
          required: false
          type: string
          enum:
            - PROTOCOL_UNKNOWN
            - PROTOCOL_SELDON
            - PROTOCOL_TENSERFLOW
            - PROTOCOL_V2
          default: PROTOCOL_UNKNOWN
      tags:
        - ModelMetadataService
    delete:
      summary: Delete a Model Metadata entry.
      operationId: ModelMetadataService_DeleteModelMetadata
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1ModelMetadataDeleteResponse'
        "204":
          description: No Content
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: URI
          description: The URI for the storage bucket containing the model, or the URI to the docker image for custom models. It must be a valid URI as defined in RFC 3986, and must not exceed 200 characters.
          in: query
          required: true
          type: string
        - name: project
          description: The project that this model belongs to.
          in: query
          required: false
          type: string
      tags:
        - ModelMetadataService
    post:
      summary: Create a Model Metadata entry.
      operationId: ModelMetadataService_CreateModelMetadata
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1ModelMetadataCreateResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1Model'
      tags:
        - ModelMetadataService
    put:
      summary: Update a Model Metadata entry.
      operationId: ModelMetadataService_UpdateModelMetadata
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1ModelMetadataUpdateResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1Model'
      tags:
        - ModelMetadataService
  /model/metadata/runtime:
    get:
      summary: List Runtime Metadata for all deployments associated with a model.
      operationId: ModelMetadataService_ListRuntimeMetadataForModel
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1RuntimeMetadataListResponse'
        "204":
          description: No Content
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: ModelURI
          in: query
          required: false
          type: string
        - name: DeploymentUID
          in: query
          required: false
          type: string
        - name: DeploymentName
          in: query
          required: false
          type: string
        - name: DeploymentNamespace
          in: query
          required: false
          type: string
        - name: DeploymentStatus
          in: query
          required: false
          type: string
          enum:
            - Running
            - Stopped
            - Unknown
          default: Running
        - name: PredictorName
          in: query
          required: false
          type: string
        - name: NodeName
          in: query
          required: false
          type: string
        - name: pageSize
          description: Optional. The maximum number of Folders to return in the response.
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: |-
            Optional. A pagination token returned from a previous call to `List`
            that indicates where this listing should continue from.
          in: query
          required: false
          type: string
        - name: listMask
          description: |-
            Optional. Can be used to specify which fields of RuntimeMetadata you wish to return in the response.
            If left empty all fields will be returned.
          in: query
          required: false
          type: string
        - name: deploymentType
          in: query
          required: false
          type: string
          enum:
            - UndefinedDeploymentType
            - SeldonDeployment
            - SeldonModel
            - KnativeDetector
          default: UndefinedDeploymentType
      tags:
        - ModelMetadataService
  /iam/groups:
    get:
      summary: Endpoint is available only when user management is enabled configured - refer to the docs for how to do this. List all groups. The caller must have `read` permission on `system/iam`.
      operationId: PermissionManagementService_GetGroups
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1GetGroupsResponse'
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - PermissionManagementService
    post:
      summary: Endpoint is available only when user management is enabled configured - refer to the docs for how to do this. Create a group. The caller must have `write` permission on `system/iam`.
      operationId: PermissionManagementService_CreateGroup
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1CreateGroupResponse'
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateGroupRequest'
      tags:
        - PermissionManagementService
  /iam/groups/{groupName}/members:
    get:
      summary: Endpoint is available only when user management is enabled configured - refer to the docs for how to do this. List all members of a group. The caller must have `read` permission on `system/iam`.
      operationId: PermissionManagementService_GetGroupMembers
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1GetGroupMembersResponse'
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: groupName
          description: The name of the group for which to get members.
          in: path
          required: true
          type: string
      tags:
        - PermissionManagementService
  /iam/groups/{name}:
    delete:
      summary: Endpoint is available only when user management is enabled configured - refer to the docs for how to do this. Delete a group. The caller must have `write` permission on `system/iam`.
      operationId: PermissionManagementService_DeleteGroup
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1DeleteGroupResponse'
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: The name of the group to be deleted.
          in: path
          required: true
          type: string
      tags:
        - PermissionManagementService
  /iam/policy:
    delete:
      summary: Delete an authorization policy. The user must have `grant` permissions on the resource in the policy.
      operationId: PermissionManagementService_DeletePolicy
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1DeletePolicyResponse'
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: users
          description: The user IDs from which to revoke the given resource/action permission.
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: groups
          description: The groups from which to revoke the given resource/action permission.
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: action
          description: The action part of the resource/action permission to revoke.
          in: query
          required: true
          type: string
        - name: resource
          description: The resource part of the resource/action permission to revoke.
          in: query
          required: true
          type: string
      tags:
        - PermissionManagementService
    post:
      summary: Create an authorization policy. The user must have `grant` permissions on the resource in the policy.
      operationId: PermissionManagementService_CreatePolicy
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1CreatePolicyResponse'
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1Policy'
      tags:
        - PermissionManagementService
  /iam/policy/permissions:
    get:
      summary: List all permissions associated with the given users and groups. A regular user will be able to see only their permissions and the permissions of their groups. A user with `read` permission on `system/iam` can see all permissions.
      operationId: PermissionManagementService_GetPermissions
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1GetPermissionsResponse'
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: users
          description: The user IDs for which to list permission.
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: groups
          description: The groups for which to list permission.
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: callerPermissions
          description: If true will list the permissions of the user making the request. All users have permissions to check their permissions.
          in: query
          required: false
          type: boolean
      tags:
        - PermissionManagementService
  /iam/policy/targets:
    get:
      summary: List all users and groups who have access to the given resource/action pair. The user calling this endpoint must have `grant` access to the given resource.
      operationId: PermissionManagementService_GetPolicyTargets
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1GetPolicyTargetsResponse'
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: action
          description: The action a target should be able to perform on the given resource.
          in: query
          required: true
          type: string
        - name: resource
          description: The resource a target should have access to.
          in: query
          required: true
          type: string
      tags:
        - PermissionManagementService
  /iam/users:
    get:
      summary: Endpoint is available only when user management is enabled configured - refer to the docs for how to do this. List users. The caller must have `read` permission on `system/iam`.
      operationId: PermissionManagementService_GetUsers
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1GetUsersResponse'
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: username
          description: The username of the user to fetch. It must consist of only letters, numbers, underscores, and dashes, and be at most 30 characters.
          in: query
          required: false
          type: string
        - name: email
          description: The email of the user to fetch. It must be a valid email.
          in: query
          required: false
          type: string
        - name: firstName
          in: query
          required: false
          type: string
        - name: lastName
          in: query
          required: false
          type: string
      tags:
        - PermissionManagementService
    post:
      summary: Endpoint is available only when user management is enabled configured - refer to the docs for how to do this. Create a user. The caller must have `write` permission on `system/iam`.
      operationId: PermissionManagementService_CreateUser
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1CreateUserResponse'
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateUserRequest'
      tags:
        - PermissionManagementService
  /iam/users/{username}:
    delete:
      summary: Endpoint is available only when user management is enabled configured - refer to the docs for how to do this. Delete a user. The caller must have `write` permission on `system/iam`.
      operationId: PermissionManagementService_DeleteUser
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1DeleteUserResponse'
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: username
          description: The username of the user to be deleted.
          in: path
          required: true
          type: string
      tags:
        - PermissionManagementService
  /iam/users/{username}/groups:
    get:
      summary: Endpoint is available only when user management is enabled configured - refer to the docs for how to do this. List all groups of a user. The caller must have `read` permission on `system/iam`.
      operationId: PermissionManagementService_GetUserGroups
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1GetUserGroupsResponse'
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: username
          description: The name of the user for who to get groups.
          in: path
          required: true
          type: string
      tags:
        - PermissionManagementService
  /iam/users/{username}/groups/{group}:
    delete:
      summary: Endpoint is available only when user management is enabled configured - refer to the docs for how to do this. Delete user from a group. The caller must have `write` permission on `system/iam`.
      operationId: PermissionManagementService_DeleteUserFromGroup
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1DeleteUserFromGroupResponse'
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: username
          description: The name of the user to be removed from a group.
          in: path
          required: true
          type: string
        - name: group
          description: The name of the group from which to remove a user.
          in: path
          required: true
          type: string
      tags:
        - PermissionManagementService
    put:
      summary: Endpoint is available only when user management is enabled configured - refer to the docs for how to do this. Add user to a group. The caller must have `write` permission on `system/iam`.
      operationId: PermissionManagementService_AddUserToGroup
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1AddUserToGroupResponse'
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: username
          description: The name of the user to be added to a group.
          in: path
          required: true
          type: string
        - name: group
          description: The name of the group to which to add a user.
          in: path
          required: true
          type: string
      tags:
        - PermissionManagementService
  /iam/users/{username}/resetPassword:
    post:
      summary: Endpoint is available only when user management is enabled configured - refer to the docs for how to do this. Sends an email to the user with a link to reset their password. The caller must have `write` permission on `system/iam`.
      operationId: PermissionManagementService_ResetUserPassword
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1ResetUserPasswordResponse'
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: username
          description: The username of the user to be deleted.
          in: path
          required: true
          type: string
      tags:
        - PermissionManagementService
  /alerting/alerts:
    get:
      summary: List currently firing alerts.
      operationId: AlertingService_ListAlerts
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1ListAlertsResponse'
        "500":
          description: Internal Server Error
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - AlertingService
  /alerting/test:
    post:
      summary: Triggers a test alert to check alerting workflow.
      operationId: AlertingService_TriggerTestAlert
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1TriggerTestAlertResponse'
        "500":
          description: Internal Server Error
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: |-
            Set to true if you wish to test Prometheus -> Alertmanager connection
            False sends an alert payload directly to Alertmanager, skipping Prometheus metrics/alert flow
          in: body
          required: true
          schema:
            type: boolean
      tags:
        - AlertingService
  /secrets/{namespace}/bucket/gcs/{remote}:
    post:
      summary: Creates a GCS bucket secret according to specified parameters.
      operationId: SecretsService_CreateGCSBucketSecret
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1CreateGCSBucketSecretResponse'
        "500":
          description: Internal Server Error
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: namespace
          description: The namespace to create secret in.
          in: path
          required: true
          type: string
        - name: remote
          description: The name of the remote to create, can be lowercase characters or numbers up to 10 characters long. The created secret will be named {remote}-bucket.
          in: path
          required: true
          type: string
        - name: body
          description: The GCS account credentials to populate the secret. See documentation for how to generate this.
          in: body
          required: true
          schema:
            type: object
            description: The GCS account credentials to populate the secret. See documentation for how to generate this.
      tags:
        - SecretsService
  /secrets/{namespace}/bucket/rclone/{remote}:
    post:
      summary: Creates a generic rclone bucket secret according to specified parameters.
      operationId: SecretsService_CreateRcloneBucketSecret
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1CreateRcloneBucketSecretResponse'
        "500":
          description: Internal Server Error
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: namespace
          description: The namespace to create secret in.
          in: path
          required: true
          type: string
        - name: remote
          description: The name of the remote to create, can be lowercase characters or numbers up to 10 characters long. The created secret will be named {remote}-bucket.
          in: path
          required: true
          type: string
        - name: body
          description: The rclone key value pairs.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1RcloneConfig'
            description: The rclone key value pairs.
      tags:
        - SecretsService
  /secrets/{namespace}/bucket/s3/{remote}:
    post:
      summary: Creates a S3 bucket secret according to specified parameters.
      operationId: SecretsService_CreateS3BucketSecret
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1CreateS3BucketSecretResponse'
        "500":
          description: Internal Server Error
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: namespace
          description: The namespace to create secret in.
          in: path
          required: true
          type: string
        - name: remote
          description: The name of the remote to create, can be lowercase characters or numbers up to 10 characters long. The created secret will be named {remote}-bucket.
          in: path
          required: true
          type: string
        - name: body
          description: The S3 account credentials to populate the secret. See documentation for how to generate these.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1S3Credentials'
            description: The S3 account credentials to populate the secret. See documentation for how to generate these.
      tags:
        - SecretsService
  /secrets/{namespace}/registry/{name}:
    post:
      summary: Creates a registry secret according to specified parameters.
      operationId: SecretsService_CreateRegistrySecret
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1CreateRegistrySecretResponse'
        "500":
          description: Internal Server Error
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: namespace
          description: The namespace to create secret in.
          in: path
          required: true
          type: string
        - name: name
          description: The name of the secret to create.
          in: path
          required: true
          type: string
        - name: body
          description: The raw json docker credentials config.
          in: body
          required: true
          schema:
            type: object
            description: The raw json docker credentials config.
      tags:
        - SecretsService
  /secrets/{namespace}/{secretType}:
    get:
      summary: Lists the names and metadata of secrets used by Seldon Deploy.
      operationId: SecretsService_ListSecrets
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1ListSecretsResponse'
        "500":
          description: Internal Server Error
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: namespace
          description: The namespace to list secrets in.
          in: path
          required: true
          type: string
        - name: secretType
          description: The secret type, can be one of (`bucket`, `registry`) or `all` to list all secrets used by Seldon Deploy.
          in: path
          required: true
          type: string
          enum:
            - all
            - bucket
            - registry
      tags:
        - SecretsService
  /secrets/{namespace}/{secretType}/{name}:
    delete:
      summary: Deletes the specified secret.
      operationId: SecretsService_DeleteSecret
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1DeleteSecretResponse'
        "500":
          description: Internal Server Error
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: namespace
          description: The namespace to delete secret from.
          in: path
          required: true
          type: string
        - name: secretType
          description: The secret type of the secret to be deleted, can be one of (`bucket`, `registry`).
          in: path
          required: true
          type: string
          enum:
            - all
            - bucket
            - registry
        - name: name
          description: The name of the secret to delete.
          in: path
          required: true
          type: string
      tags:
        - SecretsService
produces:
  - application/json
responses:
  AnalyticsProps:
    description: ""
    headers:
      distinct_id:
        type: string
      release_type:
        type: string
      schema_version:
        type: string
      seldon_deploy_version:
        type: string
      token:
        type: string
  ApplicationLogsResponse:
    description: Application Logs
    schema:
      $ref: '#/definitions/ApplicationLogsResponse'
  BatchJobGetResponse:
    description: Batch Job Response
    schema:
      $ref: '#/definitions/BatchJobGetResponse'
  BatchJobPostResponse:
    description: Batch Job Post Response
    schema:
      $ref: '#/definitions/BatchJobPostResponse'
  BatchJobsListResponse:
    description: Batch Jobs List Response
    schema:
      $ref: '#/definitions/BatchJobsListResponse'
  ClusterInfoResponse:
    description: Cluster Info
    schema:
      $ref: '#/definitions/ClusterInfo'
  DetectorListResponse:
    description: Detector configuration data list
    schema:
      items:
        $ref: '#/definitions/DetectorData'
      type: array
  DetectorResponse:
    description: Detector configuration data
    schema:
      $ref: '#/definitions/DetectorData'
  ErrorDefault:
    description: ErrorDefault Error
    schema:
      $ref: '#/definitions/Error'
  FeatureDistResponse:
    description: Feature Distribution Response
    schema:
      $ref: '#/definitions/FeatureDistributionResponse'
  FeatureStatResponse:
    description: Feature Statistics Response
    schema:
      $ref: '#/definitions/FeatureStatisticsResponse'
  GenericResponse:
    description: Generic
    schema:
      type: object
  GitDiffResponse:
    description: Git Diff
    schema:
      $ref: '#/definitions/FileDiff'
  GitLogsResponse:
    description: Git Logs
    schema:
      items:
        $ref: '#/definitions/AuditLog'
      type: array
  HealthCheckResponse:
    description: Version
    schema:
      $ref: '#/definitions/HealthCheckInfo'
  MessageResponse:
    description: GenericMessage Message
    schema:
      $ref: '#/definitions/Message'
  ResourceListResponse:
    description: Resource list
    schema:
      items:
        $ref: '#/definitions/Component'
      type: array
  SeldonDeploymentListResponse:
    description: Seldon Deployment list
    schema:
      $ref: '#/definitions/SeldonDeploymentList'
  SeldonDeploymentResponse:
    description: Seldon Deployment
    schema:
      $ref: '#/definitions/SeldonDeployment'
  SeldonExperimentResponse:
    description: Seldon Experiment
    schema:
      $ref: '#/definitions/SeldonExperiment'
  SeldonModelListResponse:
    description: Seldon Model List
    schema:
      $ref: '#/definitions/SeldonModelList'
  SeldonModelResponse:
    description: Seldon Model
    schema:
      $ref: '#/definitions/SeldonModel'
  SeldonPipelineListResponse:
    description: Seldon Pipeline List
    schema:
      $ref: '#/definitions/SeldonPipelineList'
  SeldonPipelineResponse:
    description: Seldon Pipeline
    schema:
      $ref: '#/definitions/SeldonPipeline'
  UserResponse:
    description: User
    schema:
      $ref: '#/definitions/UserInfo'
  VersionResponse:
    description: Version
    schema:
      $ref: '#/definitions/VersionInfo'
schemes:
  - http
  - https
security:
  - OAuth2:
      - '[]'
securityDefinitions:
  OAuth2:
    flow: password
    scopes:
      email: ""
      groups: ""
      openid: ""
      profile: ""
    tokenUrl: https://Y.Y.Y.Y
    type: oauth2
swagger: "2.0"
tags:
  - description: Environment APIs for Seldon Deploy
    name: Environment
  - description: SeldonDeployments APIs for Seldon Deploy
    name: SeldonDeployments
  - description: Seldon Core Pipeline APIs for Seldon Deploy
    name: Pipelines
  - description: Seldon Core Model APIs for Seldon Deploy
    name: Models
  - description: Seldon Core Experiment APIs for Seldon Deploy
    name: Experiments
  - description: Prediction APIs for Seldon Deploy
    name: Predict
  - description: Explanation APIs for Seldon Deploy
    name: Explain
  - description: GitOps APIs for Seldon Deploy
    name: GitOps
  - description: Loadtest Jobs APIs for Seldon Deploy
    name: LoadtestJobs
  - description: Batch Jobs APIs for Seldon Deploy
    name: BatchJobs
  - description: Drift Detector APIs for Seldon Deploy
    name: DriftDetector
  - description: Outlier Detector APIs for Seldon Deploy
    name: OutlierDetector
  - description: Metrics Server APIs for Seldon Deploy
    name: MetricsServer
  - description: KubernetesResources APIs for Seldon Deploy
    name: KubernetesResources
  - description: ApplicationLogs APIs for Seldon Deploy
    name: ApplicationLogs
